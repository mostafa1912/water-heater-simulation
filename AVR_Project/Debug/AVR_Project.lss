
AVR_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000269c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000269c  00002710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002730  00000000  00000000  00002730  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000013eb  00000000  00000000  00004e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000624b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000638b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000064fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008144  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000902f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a997  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 25 13 	jmp	0x264a	; 0x264a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "../01_HAL/03_CLCD/HAL_CLCD_config.h"




int main(){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	a7 97       	sbiw	r28, 0x27	; 39
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(KEYPAD_U8_COL_PORT, KEYPAD_U8_COL_PIN0, DIO_OUTPUT);
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	4f ef       	ldi	r20, 0xFF	; 255
     b50:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_U8_COL_PORT, KEYPAD_U8_COL_PIN1, DIO_OUTPUT);
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	4f ef       	ldi	r20, 0xFF	; 255
     b5a:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_U8_COL_PORT, KEYPAD_U8_COL_PIN2, DIO_OUTPUT);
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	62 e0       	ldi	r22, 0x02	; 2
     b62:	4f ef       	ldi	r20, 0xFF	; 255
     b64:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_U8_COL_PORT, KEYPAD_U8_COL_PIN3, DIO_OUTPUT);
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	63 e0       	ldi	r22, 0x03	; 3
     b6c:	4f ef       	ldi	r20, 0xFF	; 255
     b6e:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(KEYPAD_U8_ROW_PORT, KEYPAD_U8_ROW_PIN0, DIO_INPUT);
     b72:	83 e0       	ldi	r24, 0x03	; 3
     b74:	63 e0       	ldi	r22, 0x03	; 3
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_U8_ROW_PORT, KEYPAD_U8_ROW_PIN1, DIO_INPUT);
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	62 e0       	ldi	r22, 0x02	; 2
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_U8_ROW_PORT, KEYPAD_U8_ROW_PIN2, DIO_INPUT);
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_U8_ROW_PORT, KEYPAD_U8_ROW_PIN3, DIO_INPUT);
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>


	DIO_voidEnablePullUpPin(KEYPAD_U8_ROW_PORT, KEYPAD_U8_ROW_PIN0);
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	63 e0       	ldi	r22, 0x03	; 3
     b9e:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <DIO_voidEnablePullUpPin>
	DIO_voidEnablePullUpPin(KEYPAD_U8_ROW_PORT, KEYPAD_U8_ROW_PIN1);
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	62 e0       	ldi	r22, 0x02	; 2
     ba6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <DIO_voidEnablePullUpPin>
	DIO_voidEnablePullUpPin(KEYPAD_U8_ROW_PORT, KEYPAD_U8_ROW_PIN2);
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <DIO_voidEnablePullUpPin>
	DIO_voidEnablePullUpPin(KEYPAD_U8_ROW_PORT, KEYPAD_U8_ROW_PIN3);
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <DIO_voidEnablePullUpPin>


	DIO_voidSetPinDirection(DIO_PORTB, 3, DIO_OUTPUT);
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	63 e0       	ldi	r22, 0x03	; 3
     bbe:	4f ef       	ldi	r20, 0xFF	; 255
     bc0:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_PORTB, 3, DIO_LOW);
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	63 e0       	ldi	r22, 0x03	; 3
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
	u8 Keypad_matrix_2d[4][4]= {
			{'7','8','9','/'},
			{'4','5','6','*'},
			{'1','2','3','-'},
			{'N','0','=','+'}
	};
     bce:	ce 01       	movw	r24, r28
     bd0:	43 96       	adiw	r24, 0x13	; 19
     bd2:	9c a3       	std	Y+36, r25	; 0x24
     bd4:	8b a3       	std	Y+35, r24	; 0x23
     bd6:	e0 e7       	ldi	r30, 0x70	; 112
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	fe a3       	std	Y+38, r31	; 0x26
     bdc:	ed a3       	std	Y+37, r30	; 0x25
     bde:	f0 e1       	ldi	r31, 0x10	; 16
     be0:	ff a3       	std	Y+39, r31	; 0x27
     be2:	ed a1       	ldd	r30, Y+37	; 0x25
     be4:	fe a1       	ldd	r31, Y+38	; 0x26
     be6:	00 80       	ld	r0, Z
     be8:	8d a1       	ldd	r24, Y+37	; 0x25
     bea:	9e a1       	ldd	r25, Y+38	; 0x26
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	9e a3       	std	Y+38, r25	; 0x26
     bf0:	8d a3       	std	Y+37, r24	; 0x25
     bf2:	eb a1       	ldd	r30, Y+35	; 0x23
     bf4:	fc a1       	ldd	r31, Y+36	; 0x24
     bf6:	00 82       	st	Z, r0
     bf8:	8b a1       	ldd	r24, Y+35	; 0x23
     bfa:	9c a1       	ldd	r25, Y+36	; 0x24
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	9c a3       	std	Y+36, r25	; 0x24
     c00:	8b a3       	std	Y+35, r24	; 0x23
     c02:	9f a1       	ldd	r25, Y+39	; 0x27
     c04:	91 50       	subi	r25, 0x01	; 1
     c06:	9f a3       	std	Y+39, r25	; 0x27
     c08:	ef a1       	ldd	r30, Y+39	; 0x27
     c0a:	ee 23       	and	r30, r30
     c0c:	51 f7       	brne	.-44     	; 0xbe2 <main+0xac>



	DIO_voidSetPortDirection(CLCD_u8_DATA_PORT,DIO_OUTPUT);
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	6f ef       	ldi	r22, 0xFF	; 255
     c12:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DIO_voidSetPortDirection>
	DIO_voidSetPortDirection(CLCD_u8_CTRL_PORT,DIO_OUTPUT);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	6f ef       	ldi	r22, 0xFF	; 255
     c1a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DIO_voidSetPortDirection>
	CLCD_voidInit();
     c1e:	0e 94 4a 08 	call	0x1094	; 0x1094 <CLCD_voidInit>

	while (1)
	{
		for(int k = 0; i<KEYPAD_U8_NO_OF_ROWS;k++){
     c22:	18 8a       	std	Y+16, r1	; 0x10
     c24:	1f 86       	std	Y+15, r1	; 0x0f
     c26:	af c0       	rjmp	.+350    	; 0xd86 <main+0x250>
			if(KEYPAD_u8_ReadButtonState(&i, &j) == 0)
     c28:	ce 01       	movw	r24, r28
     c2a:	41 96       	adiw	r24, 0x11	; 17
     c2c:	9e 01       	movw	r18, r28
     c2e:	2e 5e       	subi	r18, 0xEE	; 238
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	b9 01       	movw	r22, r18
     c34:	0e 94 c8 06 	call	0xd90	; 0xd90 <KEYPAD_u8_ReadButtonState>
     c38:	88 23       	and	r24, r24
     c3a:	09 f0       	breq	.+2      	; 0xc3e <main+0x108>
     c3c:	9f c0       	rjmp	.+318    	; 0xd7c <main+0x246>
			{
				if(Keypad_matrix_2d[j][i] == 'N')
     c3e:	8a 89       	ldd	r24, Y+18	; 0x12
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	89 89       	ldd	r24, Y+17	; 0x11
     c46:	48 2f       	mov	r20, r24
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	22 0f       	add	r18, r18
     c50:	33 1f       	adc	r19, r19
     c52:	ce 01       	movw	r24, r28
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	82 0f       	add	r24, r18
     c58:	93 1f       	adc	r25, r19
     c5a:	84 0f       	add	r24, r20
     c5c:	95 1f       	adc	r25, r21
     c5e:	fc 01       	movw	r30, r24
     c60:	72 96       	adiw	r30, 0x12	; 18
     c62:	80 81       	ld	r24, Z
     c64:	8e 34       	cpi	r24, 0x4E	; 78
     c66:	11 f4       	brne	.+4      	; 0xc6c <main+0x136>
				{
					CLCD_voidClear();
     c68:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidClear>
				}
					CLCD_voidSendData(Keypad_matrix_2d[j][i]);
     c6c:	8a 89       	ldd	r24, Y+18	; 0x12
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	89 89       	ldd	r24, Y+17	; 0x11
     c74:	48 2f       	mov	r20, r24
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
     c7c:	22 0f       	add	r18, r18
     c7e:	33 1f       	adc	r19, r19
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	84 0f       	add	r24, r20
     c8a:	95 1f       	adc	r25, r21
     c8c:	fc 01       	movw	r30, r24
     c8e:	72 96       	adiw	r30, 0x12	; 18
     c90:	80 81       	ld	r24, Z
     c92:	0e 94 16 08 	call	0x102c	; 0x102c <CLCD_voidSendData>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a8 ec       	ldi	r26, 0xC8	; 200
     c9c:	b2 e4       	ldi	r27, 0x42	; 66
     c9e:	8b 87       	std	Y+11, r24	; 0x0b
     ca0:	9c 87       	std	Y+12, r25	; 0x0c
     ca2:	ad 87       	std	Y+13, r26	; 0x0d
     ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
     caa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cac:	9e 85       	ldd	r25, Y+14	; 0x0e
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	4a e7       	ldi	r20, 0x7A	; 122
     cb4:	55 e4       	ldi	r21, 0x45	; 69
     cb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	8f 83       	std	Y+7, r24	; 0x07
     cc0:	98 87       	std	Y+8, r25	; 0x08
     cc2:	a9 87       	std	Y+9, r26	; 0x09
     cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cc6:	6f 81       	ldd	r22, Y+7	; 0x07
     cc8:	78 85       	ldd	r23, Y+8	; 0x08
     cca:	89 85       	ldd	r24, Y+9	; 0x09
     ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e8       	ldi	r20, 0x80	; 128
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cda:	88 23       	and	r24, r24
     cdc:	2c f4       	brge	.+10     	; 0xce8 <main+0x1b2>
		__ticks = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	9e 83       	std	Y+6, r25	; 0x06
     ce4:	8d 83       	std	Y+5, r24	; 0x05
     ce6:	3f c0       	rjmp	.+126    	; 0xd66 <main+0x230>
	else if (__tmp > 65535)
     ce8:	6f 81       	ldd	r22, Y+7	; 0x07
     cea:	78 85       	ldd	r23, Y+8	; 0x08
     cec:	89 85       	ldd	r24, Y+9	; 0x09
     cee:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	57 e4       	ldi	r21, 0x47	; 71
     cf8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cfc:	18 16       	cp	r1, r24
     cfe:	4c f5       	brge	.+82     	; 0xd52 <main+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d00:	6b 85       	ldd	r22, Y+11	; 0x0b
     d02:	7c 85       	ldd	r23, Y+12	; 0x0c
     d04:	8d 85       	ldd	r24, Y+13	; 0x0d
     d06:	9e 85       	ldd	r25, Y+14	; 0x0e
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e2       	ldi	r20, 0x20	; 32
     d0e:	51 e4       	ldi	r21, 0x41	; 65
     d10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	bc 01       	movw	r22, r24
     d1a:	cd 01       	movw	r24, r26
     d1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	9e 83       	std	Y+6, r25	; 0x06
     d26:	8d 83       	std	Y+5, r24	; 0x05
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <main+0x212>
     d2a:	80 e9       	ldi	r24, 0x90	; 144
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	9c 83       	std	Y+4, r25	; 0x04
     d30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <main+0x200>
     d3a:	9c 83       	std	Y+4, r25	; 0x04
     d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	9e 83       	std	Y+6, r25	; 0x06
     d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	69 f7       	brne	.-38     	; 0xd2a <main+0x1f4>
     d50:	68 cf       	rjmp	.-304    	; 0xc22 <main+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d52:	6f 81       	ldd	r22, Y+7	; 0x07
     d54:	78 85       	ldd	r23, Y+8	; 0x08
     d56:	89 85       	ldd	r24, Y+9	; 0x09
     d58:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	9e 83       	std	Y+6, r25	; 0x06
     d64:	8d 83       	std	Y+5, r24	; 0x05
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	9a 83       	std	Y+2, r25	; 0x02
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <main+0x23c>
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	53 cf       	rjmp	.-346    	; 0xc22 <main+0xec>
	DIO_voidSetPortDirection(CLCD_u8_CTRL_PORT,DIO_OUTPUT);
	CLCD_voidInit();

	while (1)
	{
		for(int k = 0; i<KEYPAD_U8_NO_OF_ROWS;k++){
     d7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d7e:	98 89       	ldd	r25, Y+16	; 0x10
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	98 8b       	std	Y+16, r25	; 0x10
     d84:	8f 87       	std	Y+15, r24	; 0x0f
     d86:	89 89       	ldd	r24, Y+17	; 0x11
     d88:	84 30       	cpi	r24, 0x04	; 4
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <main+0x258>
     d8c:	4d cf       	rjmp	.-358    	; 0xc28 <main+0xf2>
     d8e:	49 cf       	rjmp	.-366    	; 0xc22 <main+0xec>

00000d90 <KEYPAD_u8_ReadButtonState>:




u8 KEYPAD_u8_ReadButtonState(u8* Copy_pu8COL_index, u8* Copy_pu8ROW_index)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	27 97       	sbiw	r28, 0x07	; 7
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	9c 83       	std	Y+4, r25	; 0x04
     da6:	8b 83       	std	Y+3, r24	; 0x03
     da8:	7e 83       	std	Y+6, r23	; 0x06
     daa:	6d 83       	std	Y+5, r22	; 0x05



	for (u8 i=0; i<KEYPAD_U8_NO_OF_COLUMNS;i++) //LOOPING OVER COLUMNS
     dac:	1a 82       	std	Y+2, r1	; 0x02
     dae:	33 c0       	rjmp	.+102    	; 0xe16 <KEYPAD_u8_ReadButtonState+0x86>
	{
		//ASSUME PULLUP ENABLED
		DIO_voidSetPinValue(KEYPAD_U8_COL_PORT, Col_arr[i], DIO_LOW);
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	fc 01       	movw	r30, r24
     db8:	e8 59       	subi	r30, 0x98	; 152
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	90 81       	ld	r25, Z
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	69 2f       	mov	r22, r25
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>


		for(u8 j = 0; j < KEYPAD_U8_NO_OF_ROWS;j++)
     dc8:	19 82       	std	Y+1, r1	; 0x01
     dca:	1f c0       	rjmp	.+62     	; 0xe0a <KEYPAD_u8_ReadButtonState+0x7a>
		{
			if (DIO_u8GetPinValue(KEYPAD_U8_ROW_PORT, j )== DIO_LOW )
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	69 81       	ldd	r22, Y+1	; 0x01
     dd0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <DIO_u8GetPinValue>
     dd4:	88 23       	and	r24, r24
     dd6:	51 f4       	brne	.+20     	; 0xdec <KEYPAD_u8_ReadButtonState+0x5c>
			{
				*Copy_pu8COL_index = i;
     dd8:	eb 81       	ldd	r30, Y+3	; 0x03
     dda:	fc 81       	ldd	r31, Y+4	; 0x04
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	80 83       	st	Z, r24
				*Copy_pu8COL_index = j;
     de0:	eb 81       	ldd	r30, Y+3	; 0x03
     de2:	fc 81       	ldd	r31, Y+4	; 0x04
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	80 83       	st	Z, r24
				return 0;
     de8:	1f 82       	std	Y+7, r1	; 0x07
     dea:	1a c0       	rjmp	.+52     	; 0xe20 <KEYPAD_u8_ReadButtonState+0x90>
			}


		DIO_voidSetPinValue(KEYPAD_U8_COL_PORT, Row_arr[j], DIO_HIGH);
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	fc 01       	movw	r30, r24
     df4:	e4 59       	subi	r30, 0x94	; 148
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	90 81       	ld	r25, Z
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	69 2f       	mov	r22, r25
     dfe:	4f ef       	ldi	r20, 0xFF	; 255
     e00:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
	{
		//ASSUME PULLUP ENABLED
		DIO_voidSetPinValue(KEYPAD_U8_COL_PORT, Col_arr[i], DIO_LOW);


		for(u8 j = 0; j < KEYPAD_U8_NO_OF_ROWS;j++)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	f0 f2       	brcs	.-68     	; 0xdcc <KEYPAD_u8_ReadButtonState+0x3c>
u8 KEYPAD_u8_ReadButtonState(u8* Copy_pu8COL_index, u8* Copy_pu8ROW_index)
{



	for (u8 i=0; i<KEYPAD_U8_NO_OF_COLUMNS;i++) //LOOPING OVER COLUMNS
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	8a 83       	std	Y+2, r24	; 0x02
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	84 30       	cpi	r24, 0x04	; 4
     e1a:	50 f2       	brcs	.-108    	; 0xdb0 <KEYPAD_u8_ReadButtonState+0x20>
		DIO_voidSetPinValue(KEYPAD_U8_COL_PORT, Row_arr[j], DIO_HIGH);


		}
	}
	return -1;
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	8f 83       	std	Y+7, r24	; 0x07
     e20:	8f 81       	ldd	r24, Y+7	; 0x07
}
     e22:	27 96       	adiw	r28, 0x07	; 7
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <CLCD_sendEnablePulse>:
	DIO_voidSetPinValue(CLCD_u8_DATA_PORT, CLCD_u8_DATA_PIN_2, GET_BIT( Copy_u8data,2) );
	DIO_voidSetPinValue(CLCD_u8_DATA_PORT, CLCD_u8_DATA_PIN_3, GET_BIT( Copy_u8data,3) );
}
#endif

static void CLCD_sendEnablePulse(void){
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	2e 97       	sbiw	r28, 0x0e	; 14
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN, DIO_HIGH);
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	4f ef       	ldi	r20, 0xFF	; 255
     e4e:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 e2       	ldi	r26, 0x20	; 32
     e58:	b1 e4       	ldi	r27, 0x41	; 65
     e5a:	8b 87       	std	Y+11, r24	; 0x0b
     e5c:	9c 87       	std	Y+12, r25	; 0x0c
     e5e:	ad 87       	std	Y+13, r26	; 0x0d
     e60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e62:	6b 85       	ldd	r22, Y+11	; 0x0b
     e64:	7c 85       	ldd	r23, Y+12	; 0x0c
     e66:	8d 85       	ldd	r24, Y+13	; 0x0d
     e68:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	4a e7       	ldi	r20, 0x7A	; 122
     e70:	55 e4       	ldi	r21, 0x45	; 69
     e72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	8f 83       	std	Y+7, r24	; 0x07
     e7c:	98 87       	std	Y+8, r25	; 0x08
     e7e:	a9 87       	std	Y+9, r26	; 0x09
     e80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e82:	6f 81       	ldd	r22, Y+7	; 0x07
     e84:	78 85       	ldd	r23, Y+8	; 0x08
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e8       	ldi	r20, 0x80	; 128
     e90:	5f e3       	ldi	r21, 0x3F	; 63
     e92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e96:	88 23       	and	r24, r24
     e98:	2c f4       	brge	.+10     	; 0xea4 <CLCD_sendEnablePulse+0x70>
		__ticks = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <CLCD_sendEnablePulse+0xee>
	else if (__tmp > 65535)
     ea4:	6f 81       	ldd	r22, Y+7	; 0x07
     ea6:	78 85       	ldd	r23, Y+8	; 0x08
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	3f ef       	ldi	r19, 0xFF	; 255
     eb0:	4f e7       	ldi	r20, 0x7F	; 127
     eb2:	57 e4       	ldi	r21, 0x47	; 71
     eb4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     eb8:	18 16       	cp	r1, r24
     eba:	4c f5       	brge	.+82     	; 0xf0e <CLCD_sendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e2       	ldi	r20, 0x20	; 32
     eca:	51 e4       	ldi	r21, 0x41	; 65
     ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <CLCD_sendEnablePulse+0xd0>
     ee6:	80 e9       	ldi	r24, 0x90	; 144
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	9c 83       	std	Y+4, r25	; 0x04
     eec:	8b 83       	std	Y+3, r24	; 0x03
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <CLCD_sendEnablePulse+0xbe>
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	9e 83       	std	Y+6, r25	; 0x06
     f02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	69 f7       	brne	.-38     	; 0xee6 <CLCD_sendEnablePulse+0xb2>
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <CLCD_sendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0e:	6f 81       	ldd	r22, Y+7	; 0x07
     f10:	78 85       	ldd	r23, Y+8	; 0x08
     f12:	89 85       	ldd	r24, Y+9	; 0x09
     f14:	9a 85       	ldd	r25, Y+10	; 0x0a
     f16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <CLCD_sendEnablePulse+0xfa>
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_voidSetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN, DIO_LOW);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
}
     f40:	2e 96       	adiw	r28, 0x0e	; 14
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <CLCD_voidClear>:

void CLCD_voidClear(void){
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	// Display Clear:
	CLCD_voidSendInstruction(1);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_voidSendInstruction>
}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <CLCD_voidSetCursorPosition>:

void CLCD_voidSetCursorPosition(u8 Copy_u8Row, u8 Copy_u8Col){
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <CLCD_voidSetCursorPosition+0x6>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	8a 83       	std	Y+2, r24	; 0x02
     f74:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_address;
	if(Copy_u8Row == 0){
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	88 23       	and	r24, r24
     f7a:	19 f4       	brne	.+6      	; 0xf82 <CLCD_voidSetCursorPosition+0x1c>
		Local_u8_address = Copy_u8Col;
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <CLCD_voidSetCursorPosition+0x28>
	}
	else if(Copy_u8Row == 1){
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	19 f4       	brne	.+6      	; 0xf8e <CLCD_voidSetCursorPosition+0x28>
		Local_u8_address = Copy_u8Col + 0x40; // 0x40 -> 0b0100,0000
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	80 5c       	subi	r24, 0xC0	; 192
     f8c:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		// Error
	}

	SET_BIT(Local_u8_address, 7);
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	89 83       	std	Y+1, r24	; 0x01
//	u8 Local_u8_address = 0b010000;
//	u8 Local_u8_address = Copy_u8Row;
//	Local_u8_address = Local_u8_address + 17;


	CLCD_voidSendInstruction(Local_u8_address);
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_voidSendInstruction>

}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <CLCD_voidSendSpecialCharacter>:
//	while( *(Copy_str) != '\0'){
//		CLCD_voidSendData(*(Copy_str++));
//	}
//}

void CLCD_voidSendSpecialCharacter(u8 * Copy_u8_pattern, u8 Copy_u8_pattern_number, u8 Copy_col, u8 Copy_row){
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	27 97       	sbiw	r28, 0x07	; 7
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	8b 83       	std	Y+3, r24	; 0x03
     fbe:	6d 83       	std	Y+5, r22	; 0x05
     fc0:	4e 83       	std	Y+6, r20	; 0x06
     fc2:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8_CGRAM_address, Local_u8Counter = 0;
     fc4:	19 82       	std	Y+1, r1	; 0x01
	Local_u8_CGRAM_address = Copy_u8_pattern_number * 8;
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(Local_u8_CGRAM_address, 6);
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	80 64       	ori	r24, 0x40	; 64
     fde:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendInstruction(Local_u8_CGRAM_address);
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_voidSendInstruction>

	for(Local_u8Counter = 0; Local_u8Counter < 8 ; Local_u8Counter++){
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	0e c0       	rjmp	.+28     	; 0x1006 <CLCD_voidSendSpecialCharacter+0x60>
	CLCD_voidSendData(Copy_u8_pattern[Local_u8Counter]);
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	fc 01       	movw	r30, r24
     ff6:	e2 0f       	add	r30, r18
     ff8:	f3 1f       	adc	r31, r19
     ffa:	80 81       	ld	r24, Z
     ffc:	0e 94 16 08 	call	0x102c	; 0x102c <CLCD_voidSendData>
	u8 Local_u8_CGRAM_address, Local_u8Counter = 0;
	Local_u8_CGRAM_address = Copy_u8_pattern_number * 8;
	SET_BIT(Local_u8_CGRAM_address, 6);
	CLCD_voidSendInstruction(Local_u8_CGRAM_address);

	for(Local_u8Counter = 0; Local_u8Counter < 8 ; Local_u8Counter++){
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	88 30       	cpi	r24, 0x08	; 8
    100a:	78 f3       	brcs	.-34     	; 0xfea <CLCD_voidSendSpecialCharacter+0x44>
	CLCD_voidSendData(Copy_u8_pattern[Local_u8Counter]);
	}

	CLCD_voidSetCursorPosition(Copy_col, Copy_row);
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	6f 81       	ldd	r22, Y+7	; 0x07
    1010:	0e 94 b3 07 	call	0xf66	; 0xf66 <CLCD_voidSetCursorPosition>

	CLCD_voidSendData(Copy_u8_pattern_number);
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	0e 94 16 08 	call	0x102c	; 0x102c <CLCD_voidSendData>
}
    101a:	27 96       	adiw	r28, 0x07	; 7
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	0f 92       	push	r0
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	89 83       	std	Y+1, r24	; 0x01
	// Set R/S High to send Instruction
	DIO_voidSetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN, DIO_HIGH);
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	62 e0       	ldi	r22, 0x02	; 2
    103c:	4f ef       	ldi	r20, 0xFF	; 255
    103e:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
	// Set R/W low to write
	DIO_voidSetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN, DIO_LOW);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>

#if( CLCD_u8_MODE == CLCD_8BIT_MODE)
		// Send Data
		DIO_voidSetPortValue(CLCD_u8_DATA_PORT, Copy_u8Data);
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	69 81       	ldd	r22, Y+1	; 0x01
    1050:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <DIO_voidSetPortValue>
		CLCD_sendEnablePulse();
    1054:	0e 94 1a 07 	call	0xe34	; 0xe34 <CLCD_sendEnablePulse>
		CLCD_sendEnablePulse();
#endif


	// Send enable pulse
}
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <CLCD_voidSendInstruction>:

void CLCD_voidSendInstruction(u8 Copy_u8Instruction){
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	0f 92       	push	r0
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	89 83       	std	Y+1, r24	; 0x01
	// Set R/S low to send data
	DIO_voidSetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN, DIO_LOW);
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	62 e0       	ldi	r22, 0x02	; 2
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
	// Set R/W low to write
	DIO_voidSetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN, DIO_LOW);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
	// Send Data
	#if( CLCD_u8_MODE == CLCD_8BIT_MODE)
			// Send Data
			DIO_voidSetPortValue(CLCD_u8_DATA_PORT, Copy_u8Instruction);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	69 81       	ldd	r22, Y+1	; 0x01
    1084:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <DIO_voidSetPortValue>
			CLCD_sendEnablePulse();
    1088:	0e 94 1a 07 	call	0xe34	; 0xe34 <CLCD_sendEnablePulse>
			CLCD_voidSetHalfPort(Copy_u8Instruction >> 4);
			CLCD_sendEnablePulse();
			CLCD_voidSetHalfPort(Copy_u8Instruction);
			CLCD_sendEnablePulse();
	#endif
}
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <CLCD_voidInit>:

void CLCD_voidInit(void){
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	2e 97       	sbiw	r28, 0x0e	; 14
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a0 e2       	ldi	r26, 0x20	; 32
    10ae:	b2 e4       	ldi	r27, 0x42	; 66
    10b0:	8b 87       	std	Y+11, r24	; 0x0b
    10b2:	9c 87       	std	Y+12, r25	; 0x0c
    10b4:	ad 87       	std	Y+13, r26	; 0x0d
    10b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    10bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10be:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	4a e7       	ldi	r20, 0x7A	; 122
    10c6:	55 e4       	ldi	r21, 0x45	; 69
    10c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	8f 83       	std	Y+7, r24	; 0x07
    10d2:	98 87       	std	Y+8, r25	; 0x08
    10d4:	a9 87       	std	Y+9, r26	; 0x09
    10d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10d8:	6f 81       	ldd	r22, Y+7	; 0x07
    10da:	78 85       	ldd	r23, Y+8	; 0x08
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e8       	ldi	r20, 0x80	; 128
    10e6:	5f e3       	ldi	r21, 0x3F	; 63
    10e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ec:	88 23       	and	r24, r24
    10ee:	2c f4       	brge	.+10     	; 0x10fa <CLCD_voidInit+0x66>
		__ticks = 1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	8d 83       	std	Y+5, r24	; 0x05
    10f8:	3f c0       	rjmp	.+126    	; 0x1178 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
    10fc:	78 85       	ldd	r23, Y+8	; 0x08
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	3f ef       	ldi	r19, 0xFF	; 255
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	57 e4       	ldi	r21, 0x47	; 71
    110a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    110e:	18 16       	cp	r1, r24
    1110:	4c f5       	brge	.+82     	; 0x1164 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1112:	6b 85       	ldd	r22, Y+11	; 0x0b
    1114:	7c 85       	ldd	r23, Y+12	; 0x0c
    1116:	8d 85       	ldd	r24, Y+13	; 0x0d
    1118:	9e 85       	ldd	r25, Y+14	; 0x0e
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e2       	ldi	r20, 0x20	; 32
    1120:	51 e4       	ldi	r21, 0x41	; 65
    1122:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	0f c0       	rjmp	.+30     	; 0x115a <CLCD_voidInit+0xc6>
    113c:	80 e9       	ldi	r24, 0x90	; 144
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	8b 83       	std	Y+3, r24	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <CLCD_voidInit+0xb4>
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	69 f7       	brne	.-38     	; 0x113c <CLCD_voidInit+0xa8>
    1162:	14 c0       	rjmp	.+40     	; 0x118c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1164:	6f 81       	ldd	r22, Y+7	; 0x07
    1166:	78 85       	ldd	r23, Y+8	; 0x08
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	9a 85       	ldd	r25, Y+10	; 0x0a
    116c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <CLCD_voidInit+0xf0>
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
	// delay 40ms
	_delay_ms(40);
	// function set 001(DL)NFXX ; DL:1 , N:1  , F:0 (00111000)

#if(CLCD_u8_MODE == CLCD_8BIT_MODE)
	CLCD_voidSendInstruction(0b00111000);
    118c:	88 e3       	ldi	r24, 0x38	; 56
    118e:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_voidSendInstruction>
	CLCD_voidSetHalfPort(0b00001000);
	CLCD_sendEnablePulse();0

#endif
	// Display ON/OFF:00001DCB ; D:1, C:1, B:0 (00001110)
	CLCD_voidSendInstruction(0b00001110);
    1192:	8e e0       	ldi	r24, 0x0E	; 14
    1194:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_voidSendInstruction>
	// Display Clear:
	CLCD_voidSendInstruction(1);
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_voidSendInstruction>

	// Entry mode set: 01ISXXXX
//	CLCD_voidSendInstruction(1);
}
    119e:	2e 96       	adiw	r28, 0x0e	; 14
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <CLCD_voidSendString>:

void CLCD_voidSendString(const char * Copy_str){
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <CLCD_voidSendString+0x6>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	0b c0       	rjmp	.+22     	; 0x11d6 <CLCD_voidSendString+0x26>
//	for(int i = 0; i<size; i++){
//		CLCD_voidSendData(Copy_u8Name[i]);
//	}
	while(*Copy_str != '\0'){
		CLCD_voidSendData(*(Copy_str++));
    11c0:	e9 81       	ldd	r30, Y+1	; 0x01
    11c2:	fa 81       	ldd	r31, Y+2	; 0x02
    11c4:	20 81       	ld	r18, Z
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	82 2f       	mov	r24, r18
    11d2:	0e 94 16 08 	call	0x102c	; 0x102c <CLCD_voidSendData>

void CLCD_voidSendString(const char * Copy_str){
//	for(int i = 0; i<size; i++){
//		CLCD_voidSendData(Copy_u8Name[i]);
//	}
	while(*Copy_str != '\0'){
    11d6:	e9 81       	ldd	r30, Y+1	; 0x01
    11d8:	fa 81       	ldd	r31, Y+2	; 0x02
    11da:	80 81       	ld	r24, Z
    11dc:	88 23       	and	r24, r24
    11de:	81 f7       	brne	.-32     	; 0x11c0 <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*(Copy_str++));
	}
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <SSG_voidEnable>:
#include "../../03_Service/BIT_MATH.h"
#include "../../00_MCAL/DIO/DIO_priv.h"
#include "../../00_MCAL/DIO/DIO_int.h"
#include "HAL_SSG_int.h"

void SSG_voidEnable(const SSG_t * copy_SSG){
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <SSG_voidEnable+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <SSG_voidEnable+0x8>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
	if(copy_SSG != NULL){
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	91 f0       	breq	.+36     	; 0x1226 <SSG_voidEnable+0x3c>
		u8 enablePin = copy_SSG -> SSG_enablePin;
    1202:	eb 81       	ldd	r30, Y+3	; 0x03
    1204:	fc 81       	ldd	r31, Y+4	; 0x04
    1206:	86 81       	ldd	r24, Z+6	; 0x06
    1208:	8a 83       	std	Y+2, r24	; 0x02
		u8 enablePort = copy_SSG -> SSG_enablePort;
    120a:	eb 81       	ldd	r30, Y+3	; 0x03
    120c:	fc 81       	ldd	r31, Y+4	; 0x04
    120e:	85 81       	ldd	r24, Z+5	; 0x05
    1210:	89 83       	std	Y+1, r24	; 0x01


		DIO_voidSetPinDirection(enablePort, enablePin, DIO_OUTPUT);
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	6a 81       	ldd	r22, Y+2	; 0x02
    1216:	4f ef       	ldi	r20, 0xFF	; 255
    1218:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(enablePort, enablePin, DIO_HIGH);
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	6a 81       	ldd	r22, Y+2	; 0x02
    1220:	4f ef       	ldi	r20, 0xFF	; 255
    1222:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>

	}
	else{
		// Error
	}
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <SSG_voidDisable>:


void SSG_voidDisable(const SSG_t * copy_SSG){
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <SSG_voidDisable+0x6>
    123a:	00 d0       	rcall	.+0      	; 0x123c <SSG_voidDisable+0x8>
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
	u8 enablePin = copy_SSG -> SSG_enablePin;
    1244:	eb 81       	ldd	r30, Y+3	; 0x03
    1246:	fc 81       	ldd	r31, Y+4	; 0x04
    1248:	86 81       	ldd	r24, Z+6	; 0x06
    124a:	8a 83       	std	Y+2, r24	; 0x02
	u8 enablePort = copy_SSG -> SSG_enablePort;
    124c:	eb 81       	ldd	r30, Y+3	; 0x03
    124e:	fc 81       	ldd	r31, Y+4	; 0x04
    1250:	85 81       	ldd	r24, Z+5	; 0x05
    1252:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinDirection(enablePort, enablePin, DIO_OUTPUT);
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	6a 81       	ldd	r22, Y+2	; 0x02
    1258:	4f ef       	ldi	r20, 0xFF	; 255
    125a:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(enablePort, enablePin, DIO_LOW);
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	6a 81       	ldd	r22, Y+2	; 0x02
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <SSG_voidWriteNumber>:

void SSG_voidWriteNumber(const SSG_t * copy_SSG, u8 Copy_u8Num){
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	27 97       	sbiw	r28, 0x07	; 7
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	6f 83       	std	Y+7, r22	; 0x07
	u8 pin0 = 0b00000001;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin1 = 0b00000010;
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin2 = 0b00000100;
    1298:	84 e0       	ldi	r24, 0x04	; 4
    129a:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin3 = 0b00001000;
    129c:	88 e0       	ldi	r24, 0x08	; 8
    129e:	89 83       	std	Y+1, r24	; 0x01

//	Copy_u8Num = 0b00000011;

	DIO_voidSetPinDirection(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[0], DIO_OUTPUT);
    12a0:	ed 81       	ldd	r30, Y+5	; 0x05
    12a2:	fe 81       	ldd	r31, Y+6	; 0x06
    12a4:	80 81       	ld	r24, Z
    12a6:	ed 81       	ldd	r30, Y+5	; 0x05
    12a8:	fe 81       	ldd	r31, Y+6	; 0x06
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	69 2f       	mov	r22, r25
    12ae:	4f ef       	ldi	r20, 0xFF	; 255
    12b0:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[1], DIO_OUTPUT);
    12b4:	ed 81       	ldd	r30, Y+5	; 0x05
    12b6:	fe 81       	ldd	r31, Y+6	; 0x06
    12b8:	80 81       	ld	r24, Z
    12ba:	ed 81       	ldd	r30, Y+5	; 0x05
    12bc:	fe 81       	ldd	r31, Y+6	; 0x06
    12be:	92 81       	ldd	r25, Z+2	; 0x02
    12c0:	69 2f       	mov	r22, r25
    12c2:	4f ef       	ldi	r20, 0xFF	; 255
    12c4:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[2], DIO_OUTPUT);
    12c8:	ed 81       	ldd	r30, Y+5	; 0x05
    12ca:	fe 81       	ldd	r31, Y+6	; 0x06
    12cc:	80 81       	ld	r24, Z
    12ce:	ed 81       	ldd	r30, Y+5	; 0x05
    12d0:	fe 81       	ldd	r31, Y+6	; 0x06
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	69 2f       	mov	r22, r25
    12d6:	4f ef       	ldi	r20, 0xFF	; 255
    12d8:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[3], DIO_OUTPUT);
    12dc:	ed 81       	ldd	r30, Y+5	; 0x05
    12de:	fe 81       	ldd	r31, Y+6	; 0x06
    12e0:	80 81       	ld	r24, Z
    12e2:	ed 81       	ldd	r30, Y+5	; 0x05
    12e4:	fe 81       	ldd	r31, Y+6	; 0x06
    12e6:	94 81       	ldd	r25, Z+4	; 0x04
    12e8:	69 2f       	mov	r22, r25
    12ea:	4f ef       	ldi	r20, 0xFF	; 255
    12ec:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_voidSetPinDirection>

	if( (Copy_u8Num & pin0) > 0){
    12f0:	9f 81       	ldd	r25, Y+7	; 0x07
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	89 23       	and	r24, r25
    12f6:	88 23       	and	r24, r24
    12f8:	59 f0       	breq	.+22     	; 0x1310 <SSG_voidWriteNumber+0x9a>
		DIO_voidSetPinValue(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[0], DIO_HIGH);
    12fa:	ed 81       	ldd	r30, Y+5	; 0x05
    12fc:	fe 81       	ldd	r31, Y+6	; 0x06
    12fe:	80 81       	ld	r24, Z
    1300:	ed 81       	ldd	r30, Y+5	; 0x05
    1302:	fe 81       	ldd	r31, Y+6	; 0x06
    1304:	91 81       	ldd	r25, Z+1	; 0x01
    1306:	69 2f       	mov	r22, r25
    1308:	4f ef       	ldi	r20, 0xFF	; 255
    130a:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
    130e:	0a c0       	rjmp	.+20     	; 0x1324 <SSG_voidWriteNumber+0xae>
	}
	else{
		DIO_voidSetPinValue(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[0], DIO_LOW);
    1310:	ed 81       	ldd	r30, Y+5	; 0x05
    1312:	fe 81       	ldd	r31, Y+6	; 0x06
    1314:	80 81       	ld	r24, Z
    1316:	ed 81       	ldd	r30, Y+5	; 0x05
    1318:	fe 81       	ldd	r31, Y+6	; 0x06
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	69 2f       	mov	r22, r25
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
	}

	if( (Copy_u8Num & pin1) > 0){
    1324:	8f 81       	ldd	r24, Y+7	; 0x07
    1326:	9b 81       	ldd	r25, Y+3	; 0x03
    1328:	89 23       	and	r24, r25
    132a:	88 23       	and	r24, r24
    132c:	59 f0       	breq	.+22     	; 0x1344 <SSG_voidWriteNumber+0xce>
		DIO_voidSetPinValue(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[1], DIO_HIGH);
    132e:	ed 81       	ldd	r30, Y+5	; 0x05
    1330:	fe 81       	ldd	r31, Y+6	; 0x06
    1332:	80 81       	ld	r24, Z
    1334:	ed 81       	ldd	r30, Y+5	; 0x05
    1336:	fe 81       	ldd	r31, Y+6	; 0x06
    1338:	92 81       	ldd	r25, Z+2	; 0x02
    133a:	69 2f       	mov	r22, r25
    133c:	4f ef       	ldi	r20, 0xFF	; 255
    133e:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
    1342:	0a c0       	rjmp	.+20     	; 0x1358 <SSG_voidWriteNumber+0xe2>
	}
	else{
		DIO_voidSetPinValue(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[1], DIO_LOW);
    1344:	ed 81       	ldd	r30, Y+5	; 0x05
    1346:	fe 81       	ldd	r31, Y+6	; 0x06
    1348:	80 81       	ld	r24, Z
    134a:	ed 81       	ldd	r30, Y+5	; 0x05
    134c:	fe 81       	ldd	r31, Y+6	; 0x06
    134e:	92 81       	ldd	r25, Z+2	; 0x02
    1350:	69 2f       	mov	r22, r25
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
	}

	if( (Copy_u8Num & pin2) > 0){
    1358:	8f 81       	ldd	r24, Y+7	; 0x07
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	89 23       	and	r24, r25
    135e:	88 23       	and	r24, r24
    1360:	59 f0       	breq	.+22     	; 0x1378 <SSG_voidWriteNumber+0x102>
		DIO_voidSetPinValue(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[2], DIO_HIGH);
    1362:	ed 81       	ldd	r30, Y+5	; 0x05
    1364:	fe 81       	ldd	r31, Y+6	; 0x06
    1366:	80 81       	ld	r24, Z
    1368:	ed 81       	ldd	r30, Y+5	; 0x05
    136a:	fe 81       	ldd	r31, Y+6	; 0x06
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	69 2f       	mov	r22, r25
    1370:	4f ef       	ldi	r20, 0xFF	; 255
    1372:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
    1376:	0a c0       	rjmp	.+20     	; 0x138c <SSG_voidWriteNumber+0x116>
	}
	else{
		DIO_voidSetPinValue(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[2], DIO_LOW);
    1378:	ed 81       	ldd	r30, Y+5	; 0x05
    137a:	fe 81       	ldd	r31, Y+6	; 0x06
    137c:	80 81       	ld	r24, Z
    137e:	ed 81       	ldd	r30, Y+5	; 0x05
    1380:	fe 81       	ldd	r31, Y+6	; 0x06
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	69 2f       	mov	r22, r25
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
	}

	if( (Copy_u8Num & pin3) > 0){
    138c:	8f 81       	ldd	r24, Y+7	; 0x07
    138e:	99 81       	ldd	r25, Y+1	; 0x01
    1390:	89 23       	and	r24, r25
    1392:	88 23       	and	r24, r24
    1394:	59 f0       	breq	.+22     	; 0x13ac <SSG_voidWriteNumber+0x136>
		DIO_voidSetPinValue(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[3], DIO_HIGH);
    1396:	ed 81       	ldd	r30, Y+5	; 0x05
    1398:	fe 81       	ldd	r31, Y+6	; 0x06
    139a:	80 81       	ld	r24, Z
    139c:	ed 81       	ldd	r30, Y+5	; 0x05
    139e:	fe 81       	ldd	r31, Y+6	; 0x06
    13a0:	94 81       	ldd	r25, Z+4	; 0x04
    13a2:	69 2f       	mov	r22, r25
    13a4:	4f ef       	ldi	r20, 0xFF	; 255
    13a6:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
    13aa:	0a c0       	rjmp	.+20     	; 0x13c0 <SSG_voidWriteNumber+0x14a>
	}
	else{
		DIO_voidSetPinValue(copy_SSG->SSG_dataPort, copy_SSG->SSG_dataPin[3], DIO_LOW);
    13ac:	ed 81       	ldd	r30, Y+5	; 0x05
    13ae:	fe 81       	ldd	r31, Y+6	; 0x06
    13b0:	80 81       	ld	r24, Z
    13b2:	ed 81       	ldd	r30, Y+5	; 0x05
    13b4:	fe 81       	ldd	r31, Y+6	; 0x06
    13b6:	94 81       	ldd	r25, Z+4	; 0x04
    13b8:	69 2f       	mov	r22, r25
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
	}

//	DIO_voidSetPortValue(copy_SSG -> SSG_dataPort, Copy_u8Num << 4);


}
    13c0:	27 96       	adiw	r28, 0x07	; 7
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <SSG_voidWriteTwoNumber>:

void SSG_voidWriteTwoNumber(const SSG_t * SSG_1, const SSG_t *SSG_2, u8 Copy_u8Num1, u8 Copy_u8Num2){
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	a2 97       	sbiw	r28, 0x22	; 34
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	9e 8f       	std	Y+30, r25	; 0x1e
    13e8:	8d 8f       	std	Y+29, r24	; 0x1d
    13ea:	78 a3       	std	Y+32, r23	; 0x20
    13ec:	6f 8f       	std	Y+31, r22	; 0x1f
    13ee:	49 a3       	std	Y+33, r20	; 0x21
    13f0:	2a a3       	std	Y+34, r18	; 0x22
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a0 e2       	ldi	r26, 0x20	; 32
    13f8:	b1 e4       	ldi	r27, 0x41	; 65
    13fa:	89 8f       	std	Y+25, r24	; 0x19
    13fc:	9a 8f       	std	Y+26, r25	; 0x1a
    13fe:	ab 8f       	std	Y+27, r26	; 0x1b
    1400:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1402:	69 8d       	ldd	r22, Y+25	; 0x19
    1404:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1406:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1408:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	4a e7       	ldi	r20, 0x7A	; 122
    1410:	55 e4       	ldi	r21, 0x45	; 69
    1412:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	8d 8b       	std	Y+21, r24	; 0x15
    141c:	9e 8b       	std	Y+22, r25	; 0x16
    141e:	af 8b       	std	Y+23, r26	; 0x17
    1420:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1422:	6d 89       	ldd	r22, Y+21	; 0x15
    1424:	7e 89       	ldd	r23, Y+22	; 0x16
    1426:	8f 89       	ldd	r24, Y+23	; 0x17
    1428:	98 8d       	ldd	r25, Y+24	; 0x18
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e8       	ldi	r20, 0x80	; 128
    1430:	5f e3       	ldi	r21, 0x3F	; 63
    1432:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1436:	88 23       	and	r24, r24
    1438:	2c f4       	brge	.+10     	; 0x1444 <SSG_voidWriteTwoNumber+0x72>
		__ticks = 1;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9c 8b       	std	Y+20, r25	; 0x14
    1440:	8b 8b       	std	Y+19, r24	; 0x13
    1442:	3f c0       	rjmp	.+126    	; 0x14c2 <SSG_voidWriteTwoNumber+0xf0>
	else if (__tmp > 65535)
    1444:	6d 89       	ldd	r22, Y+21	; 0x15
    1446:	7e 89       	ldd	r23, Y+22	; 0x16
    1448:	8f 89       	ldd	r24, Y+23	; 0x17
    144a:	98 8d       	ldd	r25, Y+24	; 0x18
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	4f e7       	ldi	r20, 0x7F	; 127
    1452:	57 e4       	ldi	r21, 0x47	; 71
    1454:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1458:	18 16       	cp	r1, r24
    145a:	4c f5       	brge	.+82     	; 0x14ae <SSG_voidWriteTwoNumber+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145c:	69 8d       	ldd	r22, Y+25	; 0x19
    145e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1460:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1462:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e2       	ldi	r20, 0x20	; 32
    146a:	51 e4       	ldi	r21, 0x41	; 65
    146c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	9c 8b       	std	Y+20, r25	; 0x14
    1482:	8b 8b       	std	Y+19, r24	; 0x13
    1484:	0f c0       	rjmp	.+30     	; 0x14a4 <SSG_voidWriteTwoNumber+0xd2>
    1486:	80 e9       	ldi	r24, 0x90	; 144
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	9a 8b       	std	Y+18, r25	; 0x12
    148c:	89 8b       	std	Y+17, r24	; 0x11
    148e:	89 89       	ldd	r24, Y+17	; 0x11
    1490:	9a 89       	ldd	r25, Y+18	; 0x12
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <SSG_voidWriteTwoNumber+0xc0>
    1496:	9a 8b       	std	Y+18, r25	; 0x12
    1498:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149a:	8b 89       	ldd	r24, Y+19	; 0x13
    149c:	9c 89       	ldd	r25, Y+20	; 0x14
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	9c 8b       	std	Y+20, r25	; 0x14
    14a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a4:	8b 89       	ldd	r24, Y+19	; 0x13
    14a6:	9c 89       	ldd	r25, Y+20	; 0x14
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	69 f7       	brne	.-38     	; 0x1486 <SSG_voidWriteTwoNumber+0xb4>
    14ac:	14 c0       	rjmp	.+40     	; 0x14d6 <SSG_voidWriteTwoNumber+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ae:	6d 89       	ldd	r22, Y+21	; 0x15
    14b0:	7e 89       	ldd	r23, Y+22	; 0x16
    14b2:	8f 89       	ldd	r24, Y+23	; 0x17
    14b4:	98 8d       	ldd	r25, Y+24	; 0x18
    14b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9c 8b       	std	Y+20, r25	; 0x14
    14c0:	8b 8b       	std	Y+19, r24	; 0x13
    14c2:	8b 89       	ldd	r24, Y+19	; 0x13
    14c4:	9c 89       	ldd	r25, Y+20	; 0x14
    14c6:	98 8b       	std	Y+16, r25	; 0x10
    14c8:	8f 87       	std	Y+15, r24	; 0x0f
    14ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    14cc:	98 89       	ldd	r25, Y+16	; 0x10
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <SSG_voidWriteTwoNumber+0xfc>
    14d2:	98 8b       	std	Y+16, r25	; 0x10
    14d4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		SSG_voidDisable(SSG_2);
    14d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14d8:	98 a1       	ldd	r25, Y+32	; 0x20
    14da:	0e 94 1a 09 	call	0x1234	; 0x1234 <SSG_voidDisable>
		SSG_voidWriteNumber(SSG_1, Copy_u8Num1);
    14de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14e2:	69 a1       	ldd	r22, Y+33	; 0x21
    14e4:	0e 94 3b 09 	call	0x1276	; 0x1276 <SSG_voidWriteNumber>
		SSG_voidEnable(SSG_1);
    14e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ec:	0e 94 f5 08 	call	0x11ea	; 0x11ea <SSG_voidEnable>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a0 e2       	ldi	r26, 0x20	; 32
    14f6:	b1 e4       	ldi	r27, 0x41	; 65
    14f8:	8b 87       	std	Y+11, r24	; 0x0b
    14fa:	9c 87       	std	Y+12, r25	; 0x0c
    14fc:	ad 87       	std	Y+13, r26	; 0x0d
    14fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	4a e7       	ldi	r20, 0x7A	; 122
    150e:	55 e4       	ldi	r21, 0x45	; 69
    1510:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	98 87       	std	Y+8, r25	; 0x08
    151c:	a9 87       	std	Y+9, r26	; 0x09
    151e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1534:	88 23       	and	r24, r24
    1536:	2c f4       	brge	.+10     	; 0x1542 <SSG_voidWriteTwoNumber+0x170>
		__ticks = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	3f c0       	rjmp	.+126    	; 0x15c0 <SSG_voidWriteTwoNumber+0x1ee>
	else if (__tmp > 65535)
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	78 85       	ldd	r23, Y+8	; 0x08
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	57 e4       	ldi	r21, 0x47	; 71
    1552:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	4c f5       	brge	.+82     	; 0x15ac <SSG_voidWriteTwoNumber+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e2       	ldi	r20, 0x20	; 32
    1568:	51 e4       	ldi	r21, 0x41	; 65
    156a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <SSG_voidWriteTwoNumber+0x1d0>
    1584:	80 e9       	ldi	r24, 0x90	; 144
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <SSG_voidWriteTwoNumber+0x1be>
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	69 f7       	brne	.-38     	; 0x1584 <SSG_voidWriteTwoNumber+0x1b2>
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <SSG_voidWriteTwoNumber+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <SSG_voidWriteTwoNumber+0x1fa>
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(10);
		SSG_voidDisable(SSG_1);
    15d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15d8:	0e 94 1a 09 	call	0x1234	; 0x1234 <SSG_voidDisable>
		SSG_voidWriteNumber(SSG_2, Copy_u8Num2);
    15dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15de:	98 a1       	ldd	r25, Y+32	; 0x20
    15e0:	6a a1       	ldd	r22, Y+34	; 0x22
    15e2:	0e 94 3b 09 	call	0x1276	; 0x1276 <SSG_voidWriteNumber>
		SSG_voidEnable(SSG_2);
    15e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15e8:	98 a1       	ldd	r25, Y+32	; 0x20
    15ea:	0e 94 f5 08 	call	0x11ea	; 0x11ea <SSG_voidEnable>

	}
    15ee:	a2 96       	adiw	r28, 0x22	; 34
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <LED_u8ON>:
#include "../../03_Service/BIT_MATH.h"
#include "../../00_MCAL/DIO/DIO_priv.h"
#include "../../00_MCAL/DIO/DIO_int.h"
#include "HAL_Led_int.h"

u8 LED_u8ON(const LED_t * Copy_psled){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <LED_u8ON+0x6>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9b 83       	std	Y+3, r25	; 0x03
    160e:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorState = OK;
    1610:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_psled -> LED_connection == LED_FORWARD){
    1612:	ea 81       	ldd	r30, Y+2	; 0x02
    1614:	fb 81       	ldd	r31, Y+3	; 0x03
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	59 f4       	brne	.+22     	; 0x1632 <LED_u8ON+0x32>
		DIO_voidSetPinValue(Copy_psled->LED_port, Copy_psled -> LED_pin, DIO_HIGH);
    161c:	ea 81       	ldd	r30, Y+2	; 0x02
    161e:	fb 81       	ldd	r31, Y+3	; 0x03
    1620:	80 81       	ld	r24, Z
    1622:	ea 81       	ldd	r30, Y+2	; 0x02
    1624:	fb 81       	ldd	r31, Y+3	; 0x03
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	69 2f       	mov	r22, r25
    162a:	4f ef       	ldi	r20, 0xFF	; 255
    162c:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
    1630:	12 c0       	rjmp	.+36     	; 0x1656 <LED_u8ON+0x56>
	}
	else if(Copy_psled -> LED_connection == LED_REVERSED){
    1632:	ea 81       	ldd	r30, Y+2	; 0x02
    1634:	fb 81       	ldd	r31, Y+3	; 0x03
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	88 23       	and	r24, r24
    163a:	59 f4       	brne	.+22     	; 0x1652 <LED_u8ON+0x52>
		DIO_voidSetPinValue(Copy_psled->LED_port, Copy_psled -> LED_pin, DIO_LOW);
    163c:	ea 81       	ldd	r30, Y+2	; 0x02
    163e:	fb 81       	ldd	r31, Y+3	; 0x03
    1640:	80 81       	ld	r24, Z
    1642:	ea 81       	ldd	r30, Y+2	; 0x02
    1644:	fb 81       	ldd	r31, Y+3	; 0x03
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	69 2f       	mov	r22, r25
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <LED_u8ON+0x56>
	}
	else{
		// Error
//		#warning "Error: Connection not valid"
		Local_u8ErrorState = WRONG_CONNECTION;
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <LED_u8OFF>:

u8 LED_u8OFF(const LED_t * Copy_psled){
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <LED_u8OFF+0x6>
    166a:	0f 92       	push	r0
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	9b 83       	std	Y+3, r25	; 0x03
    1672:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1674:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_psled -> LED_connection == LED_FORWARD){
    1676:	ea 81       	ldd	r30, Y+2	; 0x02
    1678:	fb 81       	ldd	r31, Y+3	; 0x03
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	59 f4       	brne	.+22     	; 0x1696 <LED_u8OFF+0x32>
		DIO_voidSetPinValue(Copy_psled->LED_port, Copy_psled -> LED_pin, DIO_LOW);
    1680:	ea 81       	ldd	r30, Y+2	; 0x02
    1682:	fb 81       	ldd	r31, Y+3	; 0x03
    1684:	80 81       	ld	r24, Z
    1686:	ea 81       	ldd	r30, Y+2	; 0x02
    1688:	fb 81       	ldd	r31, Y+3	; 0x03
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	69 2f       	mov	r22, r25
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
    1694:	12 c0       	rjmp	.+36     	; 0x16ba <LED_u8OFF+0x56>
	}
	else if(Copy_psled -> LED_connection == LED_REVERSED){
    1696:	ea 81       	ldd	r30, Y+2	; 0x02
    1698:	fb 81       	ldd	r31, Y+3	; 0x03
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	88 23       	and	r24, r24
    169e:	59 f4       	brne	.+22     	; 0x16b6 <LED_u8OFF+0x52>
		DIO_voidSetPinValue(Copy_psled->LED_port, Copy_psled -> LED_pin, DIO_HIGH);
    16a0:	ea 81       	ldd	r30, Y+2	; 0x02
    16a2:	fb 81       	ldd	r31, Y+3	; 0x03
    16a4:	80 81       	ld	r24, Z
    16a6:	ea 81       	ldd	r30, Y+2	; 0x02
    16a8:	fb 81       	ldd	r31, Y+3	; 0x03
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	69 2f       	mov	r22, r25
    16ae:	4f ef       	ldi	r20, 0xFF	; 255
    16b0:	0e 94 8d 0c 	call	0x191a	; 0x191a <DIO_voidSetPinValue>
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <LED_u8OFF+0x56>
	}
	else{
		// Error
//		#warning "Error: Connection not valid"
		Local_u8ErrorState = WRONG_CONNECTION;
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <LED_voidTOG>:

void LED_voidTOG(const LED_t * Copy_psled){
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <LED_voidTOG+0x6>
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidTogglePin(Copy_psled->LED_port, Copy_psled -> LED_pin);
    16d6:	e9 81       	ldd	r30, Y+1	; 0x01
    16d8:	fa 81       	ldd	r31, Y+2	; 0x02
    16da:	80 81       	ld	r24, Z
    16dc:	e9 81       	ldd	r30, Y+1	; 0x01
    16de:	fa 81       	ldd	r31, Y+2	; 0x02
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	69 2f       	mov	r22, r25
    16e4:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <DIO_voidTogglePin>
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <GIE_Enable>:
#include "Interrupt_priv.h"
#include "Interrupt_int.h"


void GIE_Enable()
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
	__asm__("SEI");
    16fa:	78 94       	sei
}
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <GIE_Disable>:

void GIE_Disable()
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	__asm__("CLI");
    170a:	f8 94       	cli
}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <DIO_voidSetPinDirection>:





void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8Dir){
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	27 97       	sbiw	r28, 0x07	; 7
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	6a 83       	std	Y+2, r22	; 0x02
    172a:	4b 83       	std	Y+3, r20	; 0x03
	// Validate Pin
	if(copy_u8PinId >= 0 && copy_u8PinId <= 7 )
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	88 30       	cpi	r24, 0x08	; 8
    1730:	08 f0       	brcs	.+2      	; 0x1734 <DIO_voidSetPinDirection+0x22>
    1732:	ea c0       	rjmp	.+468    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
	{
		// Validate Direction
		if(copy_u8Dir == DIO_OUTPUT){
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	8f 3f       	cpi	r24, 0xFF	; 255
    1738:	09 f0       	breq	.+2      	; 0x173c <DIO_voidSetPinDirection+0x2a>
    173a:	6f c0       	rjmp	.+222    	; 0x181a <DIO_voidSetPinDirection+0x108>
			// Validate Port
			switch(copy_u8PortId){
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3f 83       	std	Y+7, r19	; 0x07
    1744:	2e 83       	std	Y+6, r18	; 0x06
    1746:	8e 81       	ldd	r24, Y+6	; 0x06
    1748:	9f 81       	ldd	r25, Y+7	; 0x07
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	49 f1       	breq	.+82     	; 0x17a2 <DIO_voidSetPinDirection+0x90>
    1750:	2e 81       	ldd	r18, Y+6	; 0x06
    1752:	3f 81       	ldd	r19, Y+7	; 0x07
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	2c f4       	brge	.+10     	; 0x1764 <DIO_voidSetPinDirection+0x52>
    175a:	8e 81       	ldd	r24, Y+6	; 0x06
    175c:	9f 81       	ldd	r25, Y+7	; 0x07
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	61 f0       	breq	.+24     	; 0x177a <DIO_voidSetPinDirection+0x68>
    1762:	d2 c0       	rjmp	.+420    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
    1764:	2e 81       	ldd	r18, Y+6	; 0x06
    1766:	3f 81       	ldd	r19, Y+7	; 0x07
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	71 f1       	breq	.+92     	; 0x17ca <DIO_voidSetPinDirection+0xb8>
    176e:	8e 81       	ldd	r24, Y+6	; 0x06
    1770:	9f 81       	ldd	r25, Y+7	; 0x07
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	e9 f1       	breq	.+122    	; 0x17f2 <DIO_voidSetPinDirection+0xe0>
    1778:	c7 c0       	rjmp	.+398    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTA: SET_BIT(DIO_DDRA_REG,copy_u8PinId); break;
    177a:	aa e3       	ldi	r26, 0x3A	; 58
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	ea e3       	ldi	r30, 0x3A	; 58
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_voidSetPinDirection+0x86>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_voidSetPinDirection+0x82>
    179c:	84 2b       	or	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	b3 c0       	rjmp	.+358    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTB: SET_BIT(DIO_DDRB_REG,copy_u8PinId); break;
    17a2:	a7 e3       	ldi	r26, 0x37	; 55
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e7 e3       	ldi	r30, 0x37	; 55
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_voidSetPinDirection+0xae>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_voidSetPinDirection+0xaa>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	9f c0       	rjmp	.+318    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTC: SET_BIT(DIO_DDRC_REG,copy_u8PinId); break;
    17ca:	a4 e3       	ldi	r26, 0x34	; 52
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e4 e3       	ldi	r30, 0x34	; 52
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_voidSetPinDirection+0xd6>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <DIO_voidSetPinDirection+0xd2>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	8b c0       	rjmp	.+278    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTD: SET_BIT(DIO_DDRD_REG,copy_u8PinId); break;
    17f2:	a1 e3       	ldi	r26, 0x31	; 49
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e1 e3       	ldi	r30, 0x31	; 49
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_voidSetPinDirection+0xfe>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_voidSetPinDirection+0xfa>
    1814:	84 2b       	or	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	77 c0       	rjmp	.+238    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
				default: /* Error */;
			}
		}
		else if(copy_u8Dir == DIO_INPUT){
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	88 23       	and	r24, r24
    181e:	09 f0       	breq	.+2      	; 0x1822 <DIO_voidSetPinDirection+0x110>
    1820:	73 c0       	rjmp	.+230    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
			// Validate Port
			switch(copy_u8PortId){
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3d 83       	std	Y+5, r19	; 0x05
    182a:	2c 83       	std	Y+4, r18	; 0x04
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	59 f1       	breq	.+86     	; 0x188c <DIO_voidSetPinDirection+0x17a>
    1836:	2c 81       	ldd	r18, Y+4	; 0x04
    1838:	3d 81       	ldd	r19, Y+5	; 0x05
    183a:	22 30       	cpi	r18, 0x02	; 2
    183c:	31 05       	cpc	r19, r1
    183e:	2c f4       	brge	.+10     	; 0x184a <DIO_voidSetPinDirection+0x138>
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f0       	breq	.+26     	; 0x1862 <DIO_voidSetPinDirection+0x150>
    1848:	5f c0       	rjmp	.+190    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	89 f1       	breq	.+98     	; 0x18b6 <DIO_voidSetPinDirection+0x1a4>
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	83 30       	cpi	r24, 0x03	; 3
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <DIO_voidSetPinDirection+0x14e>
    185e:	40 c0       	rjmp	.+128    	; 0x18e0 <DIO_voidSetPinDirection+0x1ce>
    1860:	53 c0       	rjmp	.+166    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTA: CLR_BIT(DIO_DDRA_REG,copy_u8PinId); break;
    1862:	aa e3       	ldi	r26, 0x3A	; 58
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	ea e3       	ldi	r30, 0x3A	; 58
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_voidSetPinDirection+0x16e>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_voidSetPinDirection+0x16a>
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	8c 93       	st	X, r24
    188a:	3e c0       	rjmp	.+124    	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTB: CLR_BIT(DIO_DDRB_REG,copy_u8PinId); break;
    188c:	a7 e3       	ldi	r26, 0x37	; 55
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e7 e3       	ldi	r30, 0x37	; 55
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_voidSetPinDirection+0x198>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_voidSetPinDirection+0x194>
    18ae:	80 95       	com	r24
    18b0:	84 23       	and	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	29 c0       	rjmp	.+82     	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTC: CLR_BIT(DIO_DDRC_REG,copy_u8PinId); break;
    18b6:	a4 e3       	ldi	r26, 0x34	; 52
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e4 e3       	ldi	r30, 0x34	; 52
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_voidSetPinDirection+0x1c2>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_voidSetPinDirection+0x1be>
    18d8:	80 95       	com	r24
    18da:	84 23       	and	r24, r20
    18dc:	8c 93       	st	X, r24
    18de:	14 c0       	rjmp	.+40     	; 0x1908 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTD: CLR_BIT(DIO_DDRD_REG,copy_u8PinId); break;
    18e0:	a1 e3       	ldi	r26, 0x31	; 49
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e1 e3       	ldi	r30, 0x31	; 49
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_voidSetPinDirection+0x1ec>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_voidSetPinDirection+0x1e8>
    1902:	80 95       	com	r24
    1904:	84 23       	and	r24, r20
    1906:	8c 93       	st	X, r24
		}
	}
	else{
		// Error
	}
}
    1908:	27 96       	adiw	r28, 0x07	; 7
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8Val){
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	27 97       	sbiw	r28, 0x07	; 7
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	6a 83       	std	Y+2, r22	; 0x02
    1932:	4b 83       	std	Y+3, r20	; 0x03
	// Validate Pin
		if(copy_u8PinId >= 0 && copy_u8PinId <= 7 )
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	88 30       	cpi	r24, 0x08	; 8
    1938:	08 f0       	brcs	.+2      	; 0x193c <DIO_voidSetPinValue+0x22>
    193a:	ea c0       	rjmp	.+468    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
		{
			// Validate Value
			if(copy_u8Val > DIO_LOW){
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	88 23       	and	r24, r24
    1940:	09 f4       	brne	.+2      	; 0x1944 <DIO_voidSetPinValue+0x2a>
    1942:	6f c0       	rjmp	.+222    	; 0x1a22 <DIO_voidSetPinValue+0x108>
				// Validate Port
				switch(copy_u8PortId){
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3f 83       	std	Y+7, r19	; 0x07
    194c:	2e 83       	std	Y+6, r18	; 0x06
    194e:	8e 81       	ldd	r24, Y+6	; 0x06
    1950:	9f 81       	ldd	r25, Y+7	; 0x07
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	49 f1       	breq	.+82     	; 0x19aa <DIO_voidSetPinValue+0x90>
    1958:	2e 81       	ldd	r18, Y+6	; 0x06
    195a:	3f 81       	ldd	r19, Y+7	; 0x07
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	2c f4       	brge	.+10     	; 0x196c <DIO_voidSetPinValue+0x52>
    1962:	8e 81       	ldd	r24, Y+6	; 0x06
    1964:	9f 81       	ldd	r25, Y+7	; 0x07
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	61 f0       	breq	.+24     	; 0x1982 <DIO_voidSetPinValue+0x68>
    196a:	d2 c0       	rjmp	.+420    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
    196c:	2e 81       	ldd	r18, Y+6	; 0x06
    196e:	3f 81       	ldd	r19, Y+7	; 0x07
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	71 f1       	breq	.+92     	; 0x19d2 <DIO_voidSetPinValue+0xb8>
    1976:	8e 81       	ldd	r24, Y+6	; 0x06
    1978:	9f 81       	ldd	r25, Y+7	; 0x07
    197a:	83 30       	cpi	r24, 0x03	; 3
    197c:	91 05       	cpc	r25, r1
    197e:	e9 f1       	breq	.+122    	; 0x19fa <DIO_voidSetPinValue+0xe0>
    1980:	c7 c0       	rjmp	.+398    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
					case DIO_PORTA: SET_BIT(DIO_PORTA_REG,copy_u8PinId); break;
    1982:	ab e3       	ldi	r26, 0x3B	; 59
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	eb e3       	ldi	r30, 0x3B	; 59
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <DIO_voidSetPinValue+0x86>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <DIO_voidSetPinValue+0x82>
    19a4:	84 2b       	or	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	b3 c0       	rjmp	.+358    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
					case DIO_PORTB: SET_BIT(DIO_PORTB_REG,copy_u8PinId); break;
    19aa:	a8 e3       	ldi	r26, 0x38	; 56
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e8 e3       	ldi	r30, 0x38	; 56
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_voidSetPinValue+0xae>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <DIO_voidSetPinValue+0xaa>
    19cc:	84 2b       	or	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	9f c0       	rjmp	.+318    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
					case DIO_PORTC: SET_BIT(DIO_PORTC_REG,copy_u8PinId); break;
    19d2:	a5 e3       	ldi	r26, 0x35	; 53
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e5 e3       	ldi	r30, 0x35	; 53
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_voidSetPinValue+0xd6>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_voidSetPinValue+0xd2>
    19f4:	84 2b       	or	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	8b c0       	rjmp	.+278    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
					case DIO_PORTD: SET_BIT(DIO_PORTD_REG,copy_u8PinId); break;
    19fa:	a2 e3       	ldi	r26, 0x32	; 50
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e2 e3       	ldi	r30, 0x32	; 50
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_voidSetPinValue+0xfe>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_voidSetPinValue+0xfa>
    1a1c:	84 2b       	or	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	77 c0       	rjmp	.+238    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
					default: /* Error */;
				}
			}
			else if(copy_u8Val == DIO_LOW){
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	88 23       	and	r24, r24
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <DIO_voidSetPinValue+0x110>
    1a28:	73 c0       	rjmp	.+230    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
				// Validate Port
				switch(copy_u8PortId){
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	3d 83       	std	Y+5, r19	; 0x05
    1a32:	2c 83       	std	Y+4, r18	; 0x04
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	9d 81       	ldd	r25, Y+5	; 0x05
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	59 f1       	breq	.+86     	; 0x1a94 <DIO_voidSetPinValue+0x17a>
    1a3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a40:	3d 81       	ldd	r19, Y+5	; 0x05
    1a42:	22 30       	cpi	r18, 0x02	; 2
    1a44:	31 05       	cpc	r19, r1
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <DIO_voidSetPinValue+0x138>
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	69 f0       	breq	.+26     	; 0x1a6a <DIO_voidSetPinValue+0x150>
    1a50:	5f c0       	rjmp	.+190    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
    1a52:	2c 81       	ldd	r18, Y+4	; 0x04
    1a54:	3d 81       	ldd	r19, Y+5	; 0x05
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	89 f1       	breq	.+98     	; 0x1abe <DIO_voidSetPinValue+0x1a4>
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a60:	83 30       	cpi	r24, 0x03	; 3
    1a62:	91 05       	cpc	r25, r1
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <DIO_voidSetPinValue+0x14e>
    1a66:	40 c0       	rjmp	.+128    	; 0x1ae8 <DIO_voidSetPinValue+0x1ce>
    1a68:	53 c0       	rjmp	.+166    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
					case DIO_PORTA: CLR_BIT(DIO_PORTA_REG,copy_u8PinId); break;
    1a6a:	ab e3       	ldi	r26, 0x3B	; 59
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_voidSetPinValue+0x16e>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_voidSetPinValue+0x16a>
    1a8c:	80 95       	com	r24
    1a8e:	84 23       	and	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	3e c0       	rjmp	.+124    	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
					case DIO_PORTB: CLR_BIT(DIO_PORTB_REG,copy_u8PinId); break;
    1a94:	a8 e3       	ldi	r26, 0x38	; 56
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e8 e3       	ldi	r30, 0x38	; 56
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <DIO_voidSetPinValue+0x198>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <DIO_voidSetPinValue+0x194>
    1ab6:	80 95       	com	r24
    1ab8:	84 23       	and	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	29 c0       	rjmp	.+82     	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
					case DIO_PORTC: CLR_BIT(DIO_PORTC_REG,copy_u8PinId); break;
    1abe:	a5 e3       	ldi	r26, 0x35	; 53
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e5 e3       	ldi	r30, 0x35	; 53
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_voidSetPinValue+0x1c2>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_voidSetPinValue+0x1be>
    1ae0:	80 95       	com	r24
    1ae2:	84 23       	and	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <DIO_voidSetPinValue+0x1f6>
					case DIO_PORTD: CLR_BIT(DIO_PORTD_REG,copy_u8PinId); break;
    1ae8:	a2 e3       	ldi	r26, 0x32	; 50
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e2 e3       	ldi	r30, 0x32	; 50
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_voidSetPinValue+0x1ec>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <DIO_voidSetPinValue+0x1e8>
    1b0a:	80 95       	com	r24
    1b0c:	84 23       	and	r24, r20
    1b0e:	8c 93       	st	X, r24
			}
		}
		else{
			// Error
		}
}
    1b10:	27 96       	adiw	r28, 0x07	; 7
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 copy_u8PortId, u8 copy_u8PinId){
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <DIO_voidTogglePin+0x6>
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <DIO_voidTogglePin+0x8>
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PinId >= 0 && copy_u8PinId <= 7 ){
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	88 30       	cpi	r24, 0x08	; 8
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <DIO_voidTogglePin+0x18>
    1b38:	6e c0       	rjmp	.+220    	; 0x1c16 <DIO_voidTogglePin+0xf4>
			switch(copy_u8PortId){
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	3c 83       	std	Y+4, r19	; 0x04
    1b42:	2b 83       	std	Y+3, r18	; 0x03
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	49 f1       	breq	.+82     	; 0x1ba0 <DIO_voidTogglePin+0x7e>
    1b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b50:	3c 81       	ldd	r19, Y+4	; 0x04
    1b52:	22 30       	cpi	r18, 0x02	; 2
    1b54:	31 05       	cpc	r19, r1
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <DIO_voidTogglePin+0x40>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	61 f0       	breq	.+24     	; 0x1b78 <DIO_voidTogglePin+0x56>
    1b60:	5a c0       	rjmp	.+180    	; 0x1c16 <DIO_voidTogglePin+0xf4>
    1b62:	2b 81       	ldd	r18, Y+3	; 0x03
    1b64:	3c 81       	ldd	r19, Y+4	; 0x04
    1b66:	22 30       	cpi	r18, 0x02	; 2
    1b68:	31 05       	cpc	r19, r1
    1b6a:	71 f1       	breq	.+92     	; 0x1bc8 <DIO_voidTogglePin+0xa6>
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	83 30       	cpi	r24, 0x03	; 3
    1b72:	91 05       	cpc	r25, r1
    1b74:	e9 f1       	breq	.+122    	; 0x1bf0 <DIO_voidTogglePin+0xce>
    1b76:	4f c0       	rjmp	.+158    	; 0x1c16 <DIO_voidTogglePin+0xf4>
				case DIO_PORTA: TOG_BIT(DIO_PORTA_REG,copy_u8PinId); break;
    1b78:	ab e3       	ldi	r26, 0x3B	; 59
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	eb e3       	ldi	r30, 0x3B	; 59
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_voidTogglePin+0x74>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_voidTogglePin+0x70>
    1b9a:	84 27       	eor	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	3b c0       	rjmp	.+118    	; 0x1c16 <DIO_voidTogglePin+0xf4>
				case DIO_PORTB: TOG_BIT(DIO_PORTB_REG,copy_u8PinId); break;
    1ba0:	a8 e3       	ldi	r26, 0x38	; 56
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e8 e3       	ldi	r30, 0x38	; 56
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <DIO_voidTogglePin+0x9c>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <DIO_voidTogglePin+0x98>
    1bc2:	84 27       	eor	r24, r20
    1bc4:	8c 93       	st	X, r24
    1bc6:	27 c0       	rjmp	.+78     	; 0x1c16 <DIO_voidTogglePin+0xf4>
				case DIO_PORTC: TOG_BIT(DIO_PORTC_REG,copy_u8PinId); break;
    1bc8:	a5 e3       	ldi	r26, 0x35	; 53
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e5 e3       	ldi	r30, 0x35	; 53
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 2e       	mov	r0, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <DIO_voidTogglePin+0xc4>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0a 94       	dec	r0
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <DIO_voidTogglePin+0xc0>
    1bea:	84 27       	eor	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	13 c0       	rjmp	.+38     	; 0x1c16 <DIO_voidTogglePin+0xf4>
				case DIO_PORTD: TOG_BIT(DIO_PORTD_REG,copy_u8PinId); break;
    1bf0:	a2 e3       	ldi	r26, 0x32	; 50
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e2 e3       	ldi	r30, 0x32	; 50
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_voidTogglePin+0xec>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_voidTogglePin+0xe8>
    1c12:	84 27       	eor	r24, r20
    1c14:	8c 93       	st	X, r24
		}
		else{
			/* Error */
		}

}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8PortId, u8 copy_u8PinId){
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <DIO_u8GetPinValue+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <DIO_u8GetPinValue+0x8>
    1c2c:	0f 92       	push	r0
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	8a 83       	std	Y+2, r24	; 0x02
    1c34:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Val;
	if( copy_u8PinId >= 0 && copy_u8PinId <= 7 ){
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	88 30       	cpi	r24, 0x08	; 8
    1c3a:	08 f0       	brcs	.+2      	; 0x1c3e <DIO_u8GetPinValue+0x1a>
    1c3c:	67 c0       	rjmp	.+206    	; 0x1d0c <DIO_u8GetPinValue+0xe8>
		switch(copy_u8PortId){
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	3d 83       	std	Y+5, r19	; 0x05
    1c46:	2c 83       	std	Y+4, r18	; 0x04
    1c48:	4c 81       	ldd	r20, Y+4	; 0x04
    1c4a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c4c:	41 30       	cpi	r20, 0x01	; 1
    1c4e:	51 05       	cpc	r21, r1
    1c50:	41 f1       	breq	.+80     	; 0x1ca2 <DIO_u8GetPinValue+0x7e>
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	9d 81       	ldd	r25, Y+5	; 0x05
    1c56:	82 30       	cpi	r24, 0x02	; 2
    1c58:	91 05       	cpc	r25, r1
    1c5a:	34 f4       	brge	.+12     	; 0x1c68 <DIO_u8GetPinValue+0x44>
    1c5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c60:	21 15       	cp	r18, r1
    1c62:	31 05       	cpc	r19, r1
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <DIO_u8GetPinValue+0x5a>
    1c66:	52 c0       	rjmp	.+164    	; 0x1d0c <DIO_u8GetPinValue+0xe8>
    1c68:	4c 81       	ldd	r20, Y+4	; 0x04
    1c6a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c6c:	42 30       	cpi	r20, 0x02	; 2
    1c6e:	51 05       	cpc	r21, r1
    1c70:	51 f1       	breq	.+84     	; 0x1cc6 <DIO_u8GetPinValue+0xa2>
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	9d 81       	ldd	r25, Y+5	; 0x05
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	91 05       	cpc	r25, r1
    1c7a:	b9 f1       	breq	.+110    	; 0x1cea <DIO_u8GetPinValue+0xc6>
    1c7c:	47 c0       	rjmp	.+142    	; 0x1d0c <DIO_u8GetPinValue+0xe8>
			case DIO_PORTA: Local_u8Val = GET_BIT(DIO_PINA_REG, copy_u8PinId); break;
    1c7e:	e9 e3       	ldi	r30, 0x39	; 57
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a9 01       	movw	r20, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <DIO_u8GetPinValue+0x72>
    1c92:	55 95       	asr	r21
    1c94:	47 95       	ror	r20
    1c96:	8a 95       	dec	r24
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <DIO_u8GetPinValue+0x6e>
    1c9a:	ca 01       	movw	r24, r20
    1c9c:	81 70       	andi	r24, 0x01	; 1
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	35 c0       	rjmp	.+106    	; 0x1d0c <DIO_u8GetPinValue+0xe8>
			case DIO_PORTB: Local_u8Val = GET_BIT(DIO_PINB_REG, copy_u8PinId); break;
    1ca2:	e6 e3       	ldi	r30, 0x36	; 54
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a9 01       	movw	r20, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <DIO_u8GetPinValue+0x96>
    1cb6:	55 95       	asr	r21
    1cb8:	47 95       	ror	r20
    1cba:	8a 95       	dec	r24
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <DIO_u8GetPinValue+0x92>
    1cbe:	ca 01       	movw	r24, r20
    1cc0:	81 70       	andi	r24, 0x01	; 1
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	23 c0       	rjmp	.+70     	; 0x1d0c <DIO_u8GetPinValue+0xe8>
			case DIO_PORTC: Local_u8Val = GET_BIT(DIO_PINC_REG, copy_u8PinId); break;
    1cc6:	e3 e3       	ldi	r30, 0x33	; 51
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <DIO_u8GetPinValue+0xba>
    1cda:	55 95       	asr	r21
    1cdc:	47 95       	ror	r20
    1cde:	8a 95       	dec	r24
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <DIO_u8GetPinValue+0xb6>
    1ce2:	ca 01       	movw	r24, r20
    1ce4:	81 70       	andi	r24, 0x01	; 1
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	11 c0       	rjmp	.+34     	; 0x1d0c <DIO_u8GetPinValue+0xe8>
			case DIO_PORTD: Local_u8Val = GET_BIT(DIO_PIND_REG, copy_u8PinId); break;
    1cea:	e0 e3       	ldi	r30, 0x30	; 48
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a9 01       	movw	r20, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <DIO_u8GetPinValue+0xde>
    1cfe:	55 95       	asr	r21
    1d00:	47 95       	ror	r20
    1d02:	8a 95       	dec	r24
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <DIO_u8GetPinValue+0xda>
    1d06:	ca 01       	movw	r24, r20
    1d08:	81 70       	andi	r24, 0x01	; 1
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		// Error
	}

	return Local_u8Val;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <DIO_voidEnablePullUpPin>:


void DIO_voidEnablePullUpPin(u8 copy_u8PortId, u8 copy_u8PinId){
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <DIO_voidEnablePullUpPin+0x6>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <DIO_voidEnablePullUpPin+0x8>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PinId >= 0 && copy_u8PinId <= 7){
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	88 30       	cpi	r24, 0x08	; 8
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <DIO_voidEnablePullUpPin+0x18>
    1d34:	6e c0       	rjmp	.+220    	; 0x1e12 <DIO_voidEnablePullUpPin+0xf4>

		switch(copy_u8PortId){
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	3c 83       	std	Y+4, r19	; 0x04
    1d3e:	2b 83       	std	Y+3, r18	; 0x03
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	91 05       	cpc	r25, r1
    1d48:	49 f1       	breq	.+82     	; 0x1d9c <DIO_voidEnablePullUpPin+0x7e>
    1d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4e:	22 30       	cpi	r18, 0x02	; 2
    1d50:	31 05       	cpc	r19, r1
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <DIO_voidEnablePullUpPin+0x40>
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	61 f0       	breq	.+24     	; 0x1d74 <DIO_voidEnablePullUpPin+0x56>
    1d5c:	5a c0       	rjmp	.+180    	; 0x1e12 <DIO_voidEnablePullUpPin+0xf4>
    1d5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d60:	3c 81       	ldd	r19, Y+4	; 0x04
    1d62:	22 30       	cpi	r18, 0x02	; 2
    1d64:	31 05       	cpc	r19, r1
    1d66:	71 f1       	breq	.+92     	; 0x1dc4 <DIO_voidEnablePullUpPin+0xa6>
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6c:	83 30       	cpi	r24, 0x03	; 3
    1d6e:	91 05       	cpc	r25, r1
    1d70:	e9 f1       	breq	.+122    	; 0x1dec <DIO_voidEnablePullUpPin+0xce>
    1d72:	4f c0       	rjmp	.+158    	; 0x1e12 <DIO_voidEnablePullUpPin+0xf4>

			case DIO_PORTA: SET_BIT(DIO_PORTA_REG, copy_u8PinId); break;
    1d74:	ab e3       	ldi	r26, 0x3B	; 59
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	eb e3       	ldi	r30, 0x3B	; 59
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 2e       	mov	r0, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_voidEnablePullUpPin+0x74>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	0a 94       	dec	r0
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_voidEnablePullUpPin+0x70>
    1d96:	84 2b       	or	r24, r20
    1d98:	8c 93       	st	X, r24
    1d9a:	3b c0       	rjmp	.+118    	; 0x1e12 <DIO_voidEnablePullUpPin+0xf4>
			case DIO_PORTB: SET_BIT(DIO_PORTB_REG, copy_u8PinId); break;
    1d9c:	a8 e3       	ldi	r26, 0x38	; 56
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e8 e3       	ldi	r30, 0x38	; 56
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <DIO_voidEnablePullUpPin+0x9c>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <DIO_voidEnablePullUpPin+0x98>
    1dbe:	84 2b       	or	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	27 c0       	rjmp	.+78     	; 0x1e12 <DIO_voidEnablePullUpPin+0xf4>
			case DIO_PORTC: SET_BIT(DIO_PORTC_REG, copy_u8PinId); break;
    1dc4:	a5 e3       	ldi	r26, 0x35	; 53
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e5 e3       	ldi	r30, 0x35	; 53
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <DIO_voidEnablePullUpPin+0xc4>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <DIO_voidEnablePullUpPin+0xc0>
    1de6:	84 2b       	or	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	13 c0       	rjmp	.+38     	; 0x1e12 <DIO_voidEnablePullUpPin+0xf4>
			case DIO_PORTD: SET_BIT(DIO_PORTD_REG, copy_u8PinId); break;
    1dec:	a2 e3       	ldi	r26, 0x32	; 50
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e2 e3       	ldi	r30, 0x32	; 50
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <DIO_voidEnablePullUpPin+0xec>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <DIO_voidEnablePullUpPin+0xe8>
    1e0e:	84 2b       	or	r24, r20
    1e10:	8c 93       	st	X, r24

	}
	else{
		// Error
	}
}
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <DIO_voidDisablePullUpPin>:


void DIO_voidDisablePullUpPin(u8 copy_u8PortId, u8 copy_u8PinId){
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <DIO_voidDisablePullUpPin+0x6>
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <DIO_voidDisablePullUpPin+0x8>
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PinId >= 0 && copy_u8PinId <= 7){
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	88 30       	cpi	r24, 0x08	; 8
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <DIO_voidDisablePullUpPin+0x18>
    1e36:	73 c0       	rjmp	.+230    	; 0x1f1e <DIO_voidDisablePullUpPin+0xfe>

		switch(copy_u8PortId){
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3c 83       	std	Y+4, r19	; 0x04
    1e40:	2b 83       	std	Y+3, r18	; 0x03
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	59 f1       	breq	.+86     	; 0x1ea2 <DIO_voidDisablePullUpPin+0x82>
    1e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <DIO_voidDisablePullUpPin+0x40>
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f0       	breq	.+26     	; 0x1e78 <DIO_voidDisablePullUpPin+0x58>
    1e5e:	5f c0       	rjmp	.+190    	; 0x1f1e <DIO_voidDisablePullUpPin+0xfe>
    1e60:	2b 81       	ldd	r18, Y+3	; 0x03
    1e62:	3c 81       	ldd	r19, Y+4	; 0x04
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	89 f1       	breq	.+98     	; 0x1ecc <DIO_voidDisablePullUpPin+0xac>
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	83 30       	cpi	r24, 0x03	; 3
    1e70:	91 05       	cpc	r25, r1
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <DIO_voidDisablePullUpPin+0x56>
    1e74:	40 c0       	rjmp	.+128    	; 0x1ef6 <DIO_voidDisablePullUpPin+0xd6>
    1e76:	53 c0       	rjmp	.+166    	; 0x1f1e <DIO_voidDisablePullUpPin+0xfe>

			case DIO_PORTA: CLR_BIT(DIO_PORTA_REG, copy_u8PinId); break;
    1e78:	ab e3       	ldi	r26, 0x3B	; 59
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	eb e3       	ldi	r30, 0x3B	; 59
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	48 2f       	mov	r20, r24
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	02 2e       	mov	r0, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <DIO_voidDisablePullUpPin+0x76>
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	0a 94       	dec	r0
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <DIO_voidDisablePullUpPin+0x72>
    1e9a:	80 95       	com	r24
    1e9c:	84 23       	and	r24, r20
    1e9e:	8c 93       	st	X, r24
    1ea0:	3e c0       	rjmp	.+124    	; 0x1f1e <DIO_voidDisablePullUpPin+0xfe>
			case DIO_PORTB: CLR_BIT(DIO_PORTB_REG, copy_u8PinId); break;
    1ea2:	a8 e3       	ldi	r26, 0x38	; 56
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e8 e3       	ldi	r30, 0x38	; 56
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	48 2f       	mov	r20, r24
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 2e       	mov	r0, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <DIO_voidDisablePullUpPin+0xa0>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	0a 94       	dec	r0
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <DIO_voidDisablePullUpPin+0x9c>
    1ec4:	80 95       	com	r24
    1ec6:	84 23       	and	r24, r20
    1ec8:	8c 93       	st	X, r24
    1eca:	29 c0       	rjmp	.+82     	; 0x1f1e <DIO_voidDisablePullUpPin+0xfe>
			case DIO_PORTC: CLR_BIT(DIO_PORTC_REG, copy_u8PinId); break;
    1ecc:	a5 e3       	ldi	r26, 0x35	; 53
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e5 e3       	ldi	r30, 0x35	; 53
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_voidDisablePullUpPin+0xca>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <DIO_voidDisablePullUpPin+0xc6>
    1eee:	80 95       	com	r24
    1ef0:	84 23       	and	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <DIO_voidDisablePullUpPin+0xfe>
			case DIO_PORTD: CLR_BIT(DIO_PORTD_REG, copy_u8PinId); break;
    1ef6:	a2 e3       	ldi	r26, 0x32	; 50
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e2 e3       	ldi	r30, 0x32	; 50
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	48 2f       	mov	r20, r24
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <DIO_voidDisablePullUpPin+0xf4>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <DIO_voidDisablePullUpPin+0xf0>
    1f18:	80 95       	com	r24
    1f1a:	84 23       	and	r24, r20
    1f1c:	8c 93       	st	X, r24

	}
	else{
		// Error
	}
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <DIO_voidSetPortDirection>:

/* #####  PORT Function #### */

void DIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8Dir){
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <DIO_voidSetPortDirection+0x6>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <DIO_voidSetPortDirection+0x8>
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8PortId)
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	3c 83       	std	Y+4, r19	; 0x04
    1f44:	2b 83       	std	Y+3, r18	; 0x03
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	d1 f0       	breq	.+52     	; 0x1f84 <DIO_voidSetPortDirection+0x58>
    1f50:	2b 81       	ldd	r18, Y+3	; 0x03
    1f52:	3c 81       	ldd	r19, Y+4	; 0x04
    1f54:	22 30       	cpi	r18, 0x02	; 2
    1f56:	31 05       	cpc	r19, r1
    1f58:	2c f4       	brge	.+10     	; 0x1f64 <DIO_voidSetPortDirection+0x38>
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	61 f0       	breq	.+24     	; 0x1f7a <DIO_voidSetPortDirection+0x4e>
    1f62:	1e c0       	rjmp	.+60     	; 0x1fa0 <DIO_voidSetPortDirection+0x74>
    1f64:	2b 81       	ldd	r18, Y+3	; 0x03
    1f66:	3c 81       	ldd	r19, Y+4	; 0x04
    1f68:	22 30       	cpi	r18, 0x02	; 2
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	81 f0       	breq	.+32     	; 0x1f8e <DIO_voidSetPortDirection+0x62>
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	83 30       	cpi	r24, 0x03	; 3
    1f74:	91 05       	cpc	r25, r1
    1f76:	81 f0       	breq	.+32     	; 0x1f98 <DIO_voidSetPortDirection+0x6c>
    1f78:	13 c0       	rjmp	.+38     	; 0x1fa0 <DIO_voidSetPortDirection+0x74>
		{
			case DIO_PORTA: DIO_DDRA_REG = copy_u8Dir; break;
    1f7a:	ea e3       	ldi	r30, 0x3A	; 58
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	80 83       	st	Z, r24
    1f82:	0e c0       	rjmp	.+28     	; 0x1fa0 <DIO_voidSetPortDirection+0x74>
			case DIO_PORTB: DIO_DDRB_REG = copy_u8Dir; break;
    1f84:	e7 e3       	ldi	r30, 0x37	; 55
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	80 83       	st	Z, r24
    1f8c:	09 c0       	rjmp	.+18     	; 0x1fa0 <DIO_voidSetPortDirection+0x74>
			case DIO_PORTC: DIO_DDRC_REG = copy_u8Dir; break;
    1f8e:	e4 e3       	ldi	r30, 0x34	; 52
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	80 83       	st	Z, r24
    1f96:	04 c0       	rjmp	.+8      	; 0x1fa0 <DIO_voidSetPortDirection+0x74>
			case DIO_PORTD: DIO_DDRD_REG = copy_u8Dir; break;
    1f98:	e1 e3       	ldi	r30, 0x31	; 49
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	80 83       	st	Z, r24
			default: /* Error */; break;
		}

}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8Val){
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <DIO_voidSetPortValue+0x6>
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <DIO_voidSetPortValue+0x8>
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8PortId)
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	3c 83       	std	Y+4, r19	; 0x04
    1fc6:	2b 83       	std	Y+3, r18	; 0x03
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	d1 f0       	breq	.+52     	; 0x2006 <DIO_voidSetPortValue+0x58>
    1fd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <DIO_voidSetPortValue+0x38>
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	61 f0       	breq	.+24     	; 0x1ffc <DIO_voidSetPortValue+0x4e>
    1fe4:	1e c0       	rjmp	.+60     	; 0x2022 <DIO_voidSetPortValue+0x74>
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	81 f0       	breq	.+32     	; 0x2010 <DIO_voidSetPortValue+0x62>
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	83 30       	cpi	r24, 0x03	; 3
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	81 f0       	breq	.+32     	; 0x201a <DIO_voidSetPortValue+0x6c>
    1ffa:	13 c0       	rjmp	.+38     	; 0x2022 <DIO_voidSetPortValue+0x74>
			{
			case DIO_PORTA: DIO_PORTA_REG = copy_u8Val; break;
    1ffc:	eb e3       	ldi	r30, 0x3B	; 59
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	80 83       	st	Z, r24
    2004:	0e c0       	rjmp	.+28     	; 0x2022 <DIO_voidSetPortValue+0x74>
			case DIO_PORTB: DIO_PORTB_REG = copy_u8Val; break;
    2006:	e8 e3       	ldi	r30, 0x38	; 56
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	80 83       	st	Z, r24
    200e:	09 c0       	rjmp	.+18     	; 0x2022 <DIO_voidSetPortValue+0x74>
			case DIO_PORTC: DIO_PORTC_REG = copy_u8Val; break;
    2010:	e5 e3       	ldi	r30, 0x35	; 53
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	80 83       	st	Z, r24
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <DIO_voidSetPortValue+0x74>
			case DIO_PORTD: DIO_PORTD_REG = copy_u8Val; break;
    201a:	e2 e3       	ldi	r30, 0x32	; 50
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	80 83       	st	Z, r24
			default: /* Error */; break;
			}

}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 copy_u8PortId){
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	00 d0       	rcall	.+0      	; 0x2036 <DIO_voidTogglePort+0x6>
    2036:	0f 92       	push	r0
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	89 83       	std	Y+1, r24	; 0x01
			switch(copy_u8PortId){
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	3b 83       	std	Y+3, r19	; 0x03
    2046:	2a 83       	std	Y+2, r18	; 0x02
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	91 05       	cpc	r25, r1
    2050:	e9 f0       	breq	.+58     	; 0x208c <DIO_voidTogglePort+0x5c>
    2052:	2a 81       	ldd	r18, Y+2	; 0x02
    2054:	3b 81       	ldd	r19, Y+3	; 0x03
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	31 05       	cpc	r19, r1
    205a:	2c f4       	brge	.+10     	; 0x2066 <DIO_voidTogglePort+0x36>
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	61 f0       	breq	.+24     	; 0x207c <DIO_voidTogglePort+0x4c>
    2064:	2a c0       	rjmp	.+84     	; 0x20ba <DIO_voidTogglePort+0x8a>
    2066:	2a 81       	ldd	r18, Y+2	; 0x02
    2068:	3b 81       	ldd	r19, Y+3	; 0x03
    206a:	22 30       	cpi	r18, 0x02	; 2
    206c:	31 05       	cpc	r19, r1
    206e:	b1 f0       	breq	.+44     	; 0x209c <DIO_voidTogglePort+0x6c>
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	9b 81       	ldd	r25, Y+3	; 0x03
    2074:	83 30       	cpi	r24, 0x03	; 3
    2076:	91 05       	cpc	r25, r1
    2078:	c9 f0       	breq	.+50     	; 0x20ac <DIO_voidTogglePort+0x7c>
    207a:	1f c0       	rjmp	.+62     	; 0x20ba <DIO_voidTogglePort+0x8a>
				case DIO_PORTA: DIO_PORTA_REG ^= 0xff; break;
    207c:	ab e3       	ldi	r26, 0x3B	; 59
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	eb e3       	ldi	r30, 0x3B	; 59
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	80 95       	com	r24
    2088:	8c 93       	st	X, r24
    208a:	17 c0       	rjmp	.+46     	; 0x20ba <DIO_voidTogglePort+0x8a>
				case DIO_PORTB: DIO_PORTB_REG ^= 0xff; break;
    208c:	a8 e3       	ldi	r26, 0x38	; 56
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e8 e3       	ldi	r30, 0x38	; 56
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	80 95       	com	r24
    2098:	8c 93       	st	X, r24
    209a:	0f c0       	rjmp	.+30     	; 0x20ba <DIO_voidTogglePort+0x8a>
				case DIO_PORTC: DIO_PORTC_REG ^= 0xff; break;
    209c:	a5 e3       	ldi	r26, 0x35	; 53
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e5 e3       	ldi	r30, 0x35	; 53
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 95       	com	r24
    20a8:	8c 93       	st	X, r24
    20aa:	07 c0       	rjmp	.+14     	; 0x20ba <DIO_voidTogglePort+0x8a>
				case DIO_PORTD: DIO_PORTD_REG ^= 0xff; break;
    20ac:	a2 e3       	ldi	r26, 0x32	; 50
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e2 e3       	ldi	r30, 0x32	; 50
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	80 95       	com	r24
    20b8:	8c 93       	st	X, r24
				default: /* Error */;
			}
}
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8PortId){
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <DIO_u8GetPortValue+0x6>
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <DIO_u8GetPortValue+0x8>
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Val;
	switch(copy_u8PortId)
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	3c 83       	std	Y+4, r19	; 0x04
    20dc:	2b 83       	std	Y+3, r18	; 0x03
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	81 30       	cpi	r24, 0x01	; 1
    20e4:	91 05       	cpc	r25, r1
    20e6:	d1 f0       	breq	.+52     	; 0x211c <DIO_u8GetPortValue+0x56>
    20e8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ea:	3c 81       	ldd	r19, Y+4	; 0x04
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	2c f4       	brge	.+10     	; 0x20fc <DIO_u8GetPortValue+0x36>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	61 f0       	breq	.+24     	; 0x2112 <DIO_u8GetPortValue+0x4c>
    20fa:	1e c0       	rjmp	.+60     	; 0x2138 <DIO_u8GetPortValue+0x72>
    20fc:	2b 81       	ldd	r18, Y+3	; 0x03
    20fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2100:	22 30       	cpi	r18, 0x02	; 2
    2102:	31 05       	cpc	r19, r1
    2104:	81 f0       	breq	.+32     	; 0x2126 <DIO_u8GetPortValue+0x60>
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	83 30       	cpi	r24, 0x03	; 3
    210c:	91 05       	cpc	r25, r1
    210e:	81 f0       	breq	.+32     	; 0x2130 <DIO_u8GetPortValue+0x6a>
    2110:	13 c0       	rjmp	.+38     	; 0x2138 <DIO_u8GetPortValue+0x72>
	{
		case DIO_PORTA: Local_u8Val = DIO_PINA_REG; break;
    2112:	e9 e3       	ldi	r30, 0x39	; 57
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	0e c0       	rjmp	.+28     	; 0x2138 <DIO_u8GetPortValue+0x72>
		case DIO_PORTB: Local_u8Val = DIO_PINB_REG; break;
    211c:	e6 e3       	ldi	r30, 0x36	; 54
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	09 c0       	rjmp	.+18     	; 0x2138 <DIO_u8GetPortValue+0x72>
		case DIO_PORTC: Local_u8Val = DIO_PINC_REG; break;
    2126:	e3 e3       	ldi	r30, 0x33	; 51
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	04 c0       	rjmp	.+8      	; 0x2138 <DIO_u8GetPortValue+0x72>
		case DIO_PORTD: Local_u8Val = DIO_PIND_REG; break;
    2130:	e0 e3       	ldi	r30, 0x30	; 48
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	89 83       	std	Y+1, r24	; 0x01
		default: /* Error */; break;
	}

	return Local_u8Val;
    2138:	89 81       	ldd	r24, Y+1	; 0x01
}
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <DIO_voidEnablePullUpPort>:

void DIO_voidEnablePullUpPort(u8 copy_u8PortId){
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <DIO_voidEnablePullUpPort+0x6>
    214e:	0f 92       	push	r0
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	3b 83       	std	Y+3, r19	; 0x03
    215e:	2a 83       	std	Y+2, r18	; 0x02
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	81 30       	cpi	r24, 0x01	; 1
    2166:	91 05       	cpc	r25, r1
    2168:	d1 f0       	breq	.+52     	; 0x219e <DIO_voidEnablePullUpPort+0x56>
    216a:	2a 81       	ldd	r18, Y+2	; 0x02
    216c:	3b 81       	ldd	r19, Y+3	; 0x03
    216e:	22 30       	cpi	r18, 0x02	; 2
    2170:	31 05       	cpc	r19, r1
    2172:	2c f4       	brge	.+10     	; 0x217e <DIO_voidEnablePullUpPort+0x36>
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	9b 81       	ldd	r25, Y+3	; 0x03
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	61 f0       	breq	.+24     	; 0x2194 <DIO_voidEnablePullUpPort+0x4c>
    217c:	1e c0       	rjmp	.+60     	; 0x21ba <DIO_voidEnablePullUpPort+0x72>
    217e:	2a 81       	ldd	r18, Y+2	; 0x02
    2180:	3b 81       	ldd	r19, Y+3	; 0x03
    2182:	22 30       	cpi	r18, 0x02	; 2
    2184:	31 05       	cpc	r19, r1
    2186:	81 f0       	breq	.+32     	; 0x21a8 <DIO_voidEnablePullUpPort+0x60>
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	9b 81       	ldd	r25, Y+3	; 0x03
    218c:	83 30       	cpi	r24, 0x03	; 3
    218e:	91 05       	cpc	r25, r1
    2190:	81 f0       	breq	.+32     	; 0x21b2 <DIO_voidEnablePullUpPort+0x6a>
    2192:	13 c0       	rjmp	.+38     	; 0x21ba <DIO_voidEnablePullUpPort+0x72>
	{
		case DIO_PORTA: DIO_PORTA_REG = DIO_HIGH; break;
    2194:	eb e3       	ldi	r30, 0x3B	; 59
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	80 83       	st	Z, r24
    219c:	0e c0       	rjmp	.+28     	; 0x21ba <DIO_voidEnablePullUpPort+0x72>
		case DIO_PORTB: DIO_PORTB_REG = DIO_HIGH; break;
    219e:	e8 e3       	ldi	r30, 0x38	; 56
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	8f ef       	ldi	r24, 0xFF	; 255
    21a4:	80 83       	st	Z, r24
    21a6:	09 c0       	rjmp	.+18     	; 0x21ba <DIO_voidEnablePullUpPort+0x72>
		case DIO_PORTC: DIO_PORTC_REG = DIO_HIGH; break;
    21a8:	e5 e3       	ldi	r30, 0x35	; 53
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	8f ef       	ldi	r24, 0xFF	; 255
    21ae:	80 83       	st	Z, r24
    21b0:	04 c0       	rjmp	.+8      	; 0x21ba <DIO_voidEnablePullUpPort+0x72>
		case DIO_PORTD: DIO_PORTD_REG = DIO_HIGH; break;
    21b2:	e2 e3       	ldi	r30, 0x32	; 50
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	80 83       	st	Z, r24
		default: /* Error */; break;
	}
}
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	08 95       	ret

000021c6 <DIO_voidDisablePullUpPort>:

void DIO_voidDisablePullUpPort(u8 copy_u8PortId){
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <DIO_voidDisablePullUpPort+0x6>
    21cc:	0f 92       	push	r0
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	3b 83       	std	Y+3, r19	; 0x03
    21dc:	2a 83       	std	Y+2, r18	; 0x02
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	91 05       	cpc	r25, r1
    21e6:	c9 f0       	breq	.+50     	; 0x221a <DIO_voidDisablePullUpPort+0x54>
    21e8:	2a 81       	ldd	r18, Y+2	; 0x02
    21ea:	3b 81       	ldd	r19, Y+3	; 0x03
    21ec:	22 30       	cpi	r18, 0x02	; 2
    21ee:	31 05       	cpc	r19, r1
    21f0:	2c f4       	brge	.+10     	; 0x21fc <DIO_voidDisablePullUpPort+0x36>
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	9b 81       	ldd	r25, Y+3	; 0x03
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	61 f0       	breq	.+24     	; 0x2212 <DIO_voidDisablePullUpPort+0x4c>
    21fa:	1a c0       	rjmp	.+52     	; 0x2230 <DIO_voidDisablePullUpPort+0x6a>
    21fc:	2a 81       	ldd	r18, Y+2	; 0x02
    21fe:	3b 81       	ldd	r19, Y+3	; 0x03
    2200:	22 30       	cpi	r18, 0x02	; 2
    2202:	31 05       	cpc	r19, r1
    2204:	71 f0       	breq	.+28     	; 0x2222 <DIO_voidDisablePullUpPort+0x5c>
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	9b 81       	ldd	r25, Y+3	; 0x03
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	91 05       	cpc	r25, r1
    220e:	69 f0       	breq	.+26     	; 0x222a <DIO_voidDisablePullUpPort+0x64>
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <DIO_voidDisablePullUpPort+0x6a>
	{
		case DIO_PORTA: DIO_PORTA_REG = DIO_LOW; break;
    2212:	eb e3       	ldi	r30, 0x3B	; 59
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	10 82       	st	Z, r1
    2218:	0b c0       	rjmp	.+22     	; 0x2230 <DIO_voidDisablePullUpPort+0x6a>
		case DIO_PORTB: DIO_PORTB_REG = DIO_LOW; break;
    221a:	e8 e3       	ldi	r30, 0x38	; 56
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	10 82       	st	Z, r1
    2220:	07 c0       	rjmp	.+14     	; 0x2230 <DIO_voidDisablePullUpPort+0x6a>
		case DIO_PORTC: DIO_PORTC_REG = DIO_LOW; break;
    2222:	e5 e3       	ldi	r30, 0x35	; 53
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	10 82       	st	Z, r1
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <DIO_voidDisablePullUpPort+0x6a>
		case DIO_PORTD: DIO_PORTD_REG = DIO_LOW; break;
    222a:	e2 e3       	ldi	r30, 0x32	; 50
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	10 82       	st	Z, r1
		default: /* Error */; break;
	}
}
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <my_delay>:


void my_delay(){
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <my_delay+0x6>
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
	u32 counter = 0;
    2246:	1a 82       	std	Y+2, r1	; 0x02
    2248:	19 82       	std	Y+1, r1	; 0x01
    224a:	05 c0       	rjmp	.+10     	; 0x2256 <my_delay+0x1a>

	while( counter < 65000UL){
		counter++;
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	01 96       	adiw	r24, 0x01	; 1
    2252:	9a 83       	std	Y+2, r25	; 0x02
    2254:	89 83       	std	Y+1, r24	; 0x01


void my_delay(){
	u32 counter = 0;

	while( counter < 65000UL){
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	2d ef       	ldi	r18, 0xFD	; 253
    225c:	88 3e       	cpi	r24, 0xE8	; 232
    225e:	92 07       	cpc	r25, r18
    2260:	a8 f3       	brcs	.-22     	; 0x224c <my_delay+0x10>
		counter++;
	}

}
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <assignment1>:

void assignment1(){
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	61 97       	sbiw	r28, 0x11	; 17
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
	u8 local_val = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0; i<= 7; i++){
    2284:	18 8a       	std	Y+16, r1	; 0x10
    2286:	1f 86       	std	Y+15, r1	; 0x0f
    2288:	84 c0       	rjmp	.+264    	; 0x2392 <assignment1+0x126>
		local_val = 1 << i;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0f 84       	ldd	r0, Y+15	; 0x0f
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <assignment1+0x2a>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <assignment1+0x26>
    229a:	89 8b       	std	Y+17, r24	; 0x11
		DIO_voidSetPortValue(DIO_PORTA, local_val);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	69 89       	ldd	r22, Y+17	; 0x11
    22a0:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <DIO_voidSetPortValue>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a8 ec       	ldi	r26, 0xC8	; 200
    22aa:	b2 e4       	ldi	r27, 0x42	; 66
    22ac:	8b 87       	std	Y+11, r24	; 0x0b
    22ae:	9c 87       	std	Y+12, r25	; 0x0c
    22b0:	ad 87       	std	Y+13, r26	; 0x0d
    22b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a e7       	ldi	r20, 0x7A	; 122
    22c2:	55 e4       	ldi	r21, 0x45	; 69
    22c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	98 87       	std	Y+8, r25	; 0x08
    22d0:	a9 87       	std	Y+9, r26	; 0x09
    22d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <assignment1+0x8a>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <assignment1+0x108>
	else if (__tmp > 65535)
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <assignment1+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2310:	7c 85       	ldd	r23, Y+12	; 0x0c
    2312:	8d 85       	ldd	r24, Y+13	; 0x0d
    2314:	9e 85       	ldd	r25, Y+14	; 0x0e
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <assignment1+0xea>
    2338:	80 e9       	ldi	r24, 0x90	; 144
    233a:	91 e0       	ldi	r25, 0x01	; 1
    233c:	9c 83       	std	Y+4, r25	; 0x04
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <assignment1+0xd8>
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <assignment1+0xcc>
    235e:	14 c0       	rjmp	.+40     	; 0x2388 <assignment1+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <assignment1+0x114>
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01

}

void assignment1(){
	u8 local_val = 1;
	for(int i = 0; i<= 7; i++){
    2388:	8f 85       	ldd	r24, Y+15	; 0x0f
    238a:	98 89       	ldd	r25, Y+16	; 0x10
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	98 8b       	std	Y+16, r25	; 0x10
    2390:	8f 87       	std	Y+15, r24	; 0x0f
    2392:	8f 85       	ldd	r24, Y+15	; 0x0f
    2394:	98 89       	ldd	r25, Y+16	; 0x10
    2396:	88 30       	cpi	r24, 0x08	; 8
    2398:	91 05       	cpc	r25, r1
    239a:	0c f4       	brge	.+2      	; 0x239e <assignment1+0x132>
    239c:	76 cf       	rjmp	.-276    	; 0x228a <assignment1+0x1e>
		local_val = 1 << i;
		DIO_voidSetPortValue(DIO_PORTA, local_val);
//		local_val = local_val << 1;
		_delay_ms(100);
	}
}
    239e:	61 96       	adiw	r28, 0x11	; 17
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <assignment2>:
void assignment2(){
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	61 97       	sbiw	r28, 0x11	; 17
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
	u8 local_val = 1 << 7; // 0x80
    23c4:	80 e8       	ldi	r24, 0x80	; 128
    23c6:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0; i<= 7; i++){
    23c8:	18 8a       	std	Y+16, r1	; 0x10
    23ca:	1f 86       	std	Y+15, r1	; 0x0f
    23cc:	7e c0       	rjmp	.+252    	; 0x24ca <assignment2+0x11a>
		DIO_voidSetPortValue(DIO_PORTA, local_val);
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	69 89       	ldd	r22, Y+17	; 0x11
    23d2:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <DIO_voidSetPortValue>
		local_val = local_val >> 1;
    23d6:	89 89       	ldd	r24, Y+17	; 0x11
    23d8:	86 95       	lsr	r24
    23da:	89 8b       	std	Y+17, r24	; 0x11
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	a8 ec       	ldi	r26, 0xC8	; 200
    23e2:	b2 e4       	ldi	r27, 0x42	; 66
    23e4:	8b 87       	std	Y+11, r24	; 0x0b
    23e6:	9c 87       	std	Y+12, r25	; 0x0c
    23e8:	ad 87       	std	Y+13, r26	; 0x0d
    23ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4a e7       	ldi	r20, 0x7A	; 122
    23fa:	55 e4       	ldi	r21, 0x45	; 69
    23fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	8f 83       	std	Y+7, r24	; 0x07
    2406:	98 87       	std	Y+8, r25	; 0x08
    2408:	a9 87       	std	Y+9, r26	; 0x09
    240a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240c:	6f 81       	ldd	r22, Y+7	; 0x07
    240e:	78 85       	ldd	r23, Y+8	; 0x08
    2410:	89 85       	ldd	r24, Y+9	; 0x09
    2412:	9a 85       	ldd	r25, Y+10	; 0x0a
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e8       	ldi	r20, 0x80	; 128
    241a:	5f e3       	ldi	r21, 0x3F	; 63
    241c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2420:	88 23       	and	r24, r24
    2422:	2c f4       	brge	.+10     	; 0x242e <assignment2+0x7e>
		__ticks = 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	3f c0       	rjmp	.+126    	; 0x24ac <assignment2+0xfc>
	else if (__tmp > 65535)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	3f ef       	ldi	r19, 0xFF	; 255
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	57 e4       	ldi	r21, 0x47	; 71
    243e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	4c f5       	brge	.+82     	; 0x2498 <assignment2+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e2       	ldi	r20, 0x20	; 32
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	0f c0       	rjmp	.+30     	; 0x248e <assignment2+0xde>
    2470:	80 e9       	ldi	r24, 0x90	; 144
    2472:	91 e0       	ldi	r25, 0x01	; 1
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <assignment2+0xcc>
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	69 f7       	brne	.-38     	; 0x2470 <assignment2+0xc0>
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <assignment2+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	6f 81       	ldd	r22, Y+7	; 0x07
    249a:	78 85       	ldd	r23, Y+8	; 0x08
    249c:	89 85       	ldd	r24, Y+9	; 0x09
    249e:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9e 83       	std	Y+6, r25	; 0x06
    24aa:	8d 83       	std	Y+5, r24	; 0x05
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <assignment2+0x108>
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
	}
}
void assignment2(){
	u8 local_val = 1 << 7; // 0x80
	for(int i = 0; i<= 7; i++){
    24c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c2:	98 89       	ldd	r25, Y+16	; 0x10
    24c4:	01 96       	adiw	r24, 0x01	; 1
    24c6:	98 8b       	std	Y+16, r25	; 0x10
    24c8:	8f 87       	std	Y+15, r24	; 0x0f
    24ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    24cc:	98 89       	ldd	r25, Y+16	; 0x10
    24ce:	88 30       	cpi	r24, 0x08	; 8
    24d0:	91 05       	cpc	r25, r1
    24d2:	0c f4       	brge	.+2      	; 0x24d6 <assignment2+0x126>
    24d4:	7c cf       	rjmp	.-264    	; 0x23ce <assignment2+0x1e>
		DIO_voidSetPortValue(DIO_PORTA, local_val);
		local_val = local_val >> 1;
		_delay_ms(100);
	}
}
    24d6:	61 96       	adiw	r28, 0x11	; 17
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <assignment3>:
void assignment3(){
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	62 97       	sbiw	r28, 0x12	; 18
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
	u8 local_val = 0;
    24fc:	1a 8a       	std	Y+18, r1	; 0x12
	u8 add = 1;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0; i<= 7; i++){
    2502:	18 8a       	std	Y+16, r1	; 0x10
    2504:	1f 86       	std	Y+15, r1	; 0x0f
    2506:	82 c0       	rjmp	.+260    	; 0x260c <assignment3+0x124>
		local_val += add;
    2508:	9a 89       	ldd	r25, Y+18	; 0x12
    250a:	89 89       	ldd	r24, Y+17	; 0x11
    250c:	89 0f       	add	r24, r25
    250e:	8a 8b       	std	Y+18, r24	; 0x12
		add = add << 1;
    2510:	89 89       	ldd	r24, Y+17	; 0x11
    2512:	88 0f       	add	r24, r24
    2514:	89 8b       	std	Y+17, r24	; 0x11
		DIO_voidSetPortValue(DIO_PORTA, local_val);
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	6a 89       	ldd	r22, Y+18	; 0x12
    251a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <DIO_voidSetPortValue>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	a8 ec       	ldi	r26, 0xC8	; 200
    2524:	b2 e4       	ldi	r27, 0x42	; 66
    2526:	8b 87       	std	Y+11, r24	; 0x0b
    2528:	9c 87       	std	Y+12, r25	; 0x0c
    252a:	ad 87       	std	Y+13, r26	; 0x0d
    252c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a e7       	ldi	r20, 0x7A	; 122
    253c:	55 e4       	ldi	r21, 0x45	; 69
    253e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8f 83       	std	Y+7, r24	; 0x07
    2548:	98 87       	std	Y+8, r25	; 0x08
    254a:	a9 87       	std	Y+9, r26	; 0x09
    254c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254e:	6f 81       	ldd	r22, Y+7	; 0x07
    2550:	78 85       	ldd	r23, Y+8	; 0x08
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	5f e3       	ldi	r21, 0x3F	; 63
    255e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2562:	88 23       	and	r24, r24
    2564:	2c f4       	brge	.+10     	; 0x2570 <assignment3+0x88>
		__ticks = 1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <assignment3+0x106>
	else if (__tmp > 65535)
    2570:	6f 81       	ldd	r22, Y+7	; 0x07
    2572:	78 85       	ldd	r23, Y+8	; 0x08
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	3f ef       	ldi	r19, 0xFF	; 255
    257c:	4f e7       	ldi	r20, 0x7F	; 127
    257e:	57 e4       	ldi	r21, 0x47	; 71
    2580:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2584:	18 16       	cp	r1, r24
    2586:	4c f5       	brge	.+82     	; 0x25da <assignment3+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <assignment3+0xe8>
    25b2:	80 e9       	ldi	r24, 0x90	; 144
    25b4:	91 e0       	ldi	r25, 0x01	; 1
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <assignment3+0xd6>
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <assignment3+0xca>
    25d8:	14 c0       	rjmp	.+40     	; 0x2602 <assignment3+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <assignment3+0x112>
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	89 83       	std	Y+1, r24	; 0x01
	}
}
void assignment3(){
	u8 local_val = 0;
	u8 add = 1;
	for(int i = 0; i<= 7; i++){
    2602:	8f 85       	ldd	r24, Y+15	; 0x0f
    2604:	98 89       	ldd	r25, Y+16	; 0x10
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	98 8b       	std	Y+16, r25	; 0x10
    260a:	8f 87       	std	Y+15, r24	; 0x0f
    260c:	8f 85       	ldd	r24, Y+15	; 0x0f
    260e:	98 89       	ldd	r25, Y+16	; 0x10
    2610:	88 30       	cpi	r24, 0x08	; 8
    2612:	91 05       	cpc	r25, r1
    2614:	0c f4       	brge	.+2      	; 0x2618 <assignment3+0x130>
    2616:	78 cf       	rjmp	.-272    	; 0x2508 <assignment3+0x20>
		add = add << 1;
		DIO_voidSetPortValue(DIO_PORTA, local_val);
//		local_val = local_val << 1;
		_delay_ms(100);
	}
}
    2618:	62 96       	adiw	r28, 0x12	; 18
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <__prologue_saves__>:
    262a:	2f 92       	push	r2
    262c:	3f 92       	push	r3
    262e:	4f 92       	push	r4
    2630:	5f 92       	push	r5
    2632:	6f 92       	push	r6
    2634:	7f 92       	push	r7
    2636:	8f 92       	push	r8
    2638:	9f 92       	push	r9
    263a:	af 92       	push	r10
    263c:	bf 92       	push	r11
    263e:	cf 92       	push	r12
    2640:	df 92       	push	r13
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	ca 1b       	sub	r28, r26
    2654:	db 0b       	sbc	r29, r27
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	09 94       	ijmp

00002662 <__epilogue_restores__>:
    2662:	2a 88       	ldd	r2, Y+18	; 0x12
    2664:	39 88       	ldd	r3, Y+17	; 0x11
    2666:	48 88       	ldd	r4, Y+16	; 0x10
    2668:	5f 84       	ldd	r5, Y+15	; 0x0f
    266a:	6e 84       	ldd	r6, Y+14	; 0x0e
    266c:	7d 84       	ldd	r7, Y+13	; 0x0d
    266e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2670:	9b 84       	ldd	r9, Y+11	; 0x0b
    2672:	aa 84       	ldd	r10, Y+10	; 0x0a
    2674:	b9 84       	ldd	r11, Y+9	; 0x09
    2676:	c8 84       	ldd	r12, Y+8	; 0x08
    2678:	df 80       	ldd	r13, Y+7	; 0x07
    267a:	ee 80       	ldd	r14, Y+6	; 0x06
    267c:	fd 80       	ldd	r15, Y+5	; 0x05
    267e:	0c 81       	ldd	r16, Y+4	; 0x04
    2680:	1b 81       	ldd	r17, Y+3	; 0x03
    2682:	aa 81       	ldd	r26, Y+2	; 0x02
    2684:	b9 81       	ldd	r27, Y+1	; 0x01
    2686:	ce 0f       	add	r28, r30
    2688:	d1 1d       	adc	r29, r1
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	ed 01       	movw	r28, r26
    2696:	08 95       	ret

00002698 <_exit>:
    2698:	f8 94       	cli

0000269a <__stop_program>:
    269a:	ff cf       	rjmp	.-2      	; 0x269a <__stop_program>
